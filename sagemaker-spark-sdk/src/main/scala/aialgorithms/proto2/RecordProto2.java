// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AIAlgorithmsProtobufSchema/p.proto

package aialgorithms.proto2;

public final class RecordProto2 {
  private RecordProto2() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface Float32TensorOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // repeated float values = 1 [packed = true];
    /**
     * <code>repeated float values = 1 [packed = true];</code>
     *
     * <pre>
     * Each value in the vector. If keys is empty this is treated as a
     * dense vector.
     * </pre>
     */
    java.util.List<java.lang.Float> getValuesList();
    /**
     * <code>repeated float values = 1 [packed = true];</code>
     *
     * <pre>
     * Each value in the vector. If keys is empty this is treated as a
     * dense vector.
     * </pre>
     */
    int getValuesCount();
    /**
     * <code>repeated float values = 1 [packed = true];</code>
     *
     * <pre>
     * Each value in the vector. If keys is empty this is treated as a
     * dense vector.
     * </pre>
     */
    float getValues(int index);

    // repeated uint64 keys = 2 [packed = true];
    /**
     * <code>repeated uint64 keys = 2 [packed = true];</code>
     *
     * <pre>
     * If not empty then the vector is treated as sparse with
     * each key specifying the location of the value in the sparse vector.
     * </pre>
     */
    java.util.List<java.lang.Long> getKeysList();
    /**
     * <code>repeated uint64 keys = 2 [packed = true];</code>
     *
     * <pre>
     * If not empty then the vector is treated as sparse with
     * each key specifying the location of the value in the sparse vector.
     * </pre>
     */
    int getKeysCount();
    /**
     * <code>repeated uint64 keys = 2 [packed = true];</code>
     *
     * <pre>
     * If not empty then the vector is treated as sparse with
     * each key specifying the location of the value in the sparse vector.
     * </pre>
     */
    long getKeys(int index);

    // repeated uint64 shape = 3 [packed = true];
    /**
     * <code>repeated uint64 shape = 3 [packed = true];</code>
     *
     * <pre>
     * Optional shape which will allow the vector to represent a matrix.
     * e.g. if shape = [ 10, 20 ] then floor(keys[i] / 10) will give the row
     * and keys[i] % 20 will give the column.
     * This also supports n-dimensonal tensors.
     * NB. this must be specified if the tensor is sparse.
     * </pre>
     */
    java.util.List<java.lang.Long> getShapeList();
    /**
     * <code>repeated uint64 shape = 3 [packed = true];</code>
     *
     * <pre>
     * Optional shape which will allow the vector to represent a matrix.
     * e.g. if shape = [ 10, 20 ] then floor(keys[i] / 10) will give the row
     * and keys[i] % 20 will give the column.
     * This also supports n-dimensonal tensors.
     * NB. this must be specified if the tensor is sparse.
     * </pre>
     */
    int getShapeCount();
    /**
     * <code>repeated uint64 shape = 3 [packed = true];</code>
     *
     * <pre>
     * Optional shape which will allow the vector to represent a matrix.
     * e.g. if shape = [ 10, 20 ] then floor(keys[i] / 10) will give the row
     * and keys[i] % 20 will give the column.
     * This also supports n-dimensonal tensors.
     * NB. this must be specified if the tensor is sparse.
     * </pre>
     */
    long getShape(int index);
  }
  /**
   * Protobuf type {@code aialgorithms.proto2.Float32Tensor}
   *
   * <pre>
   * A sparse or dense rank-R tensor that stores data as doubles (float64).
   * </pre>
   */
  public static final class Float32Tensor extends
      com.google.protobuf.GeneratedMessage
      implements Float32TensorOrBuilder {
    // Use Float32Tensor.newBuilder() to construct.
    private Float32Tensor(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Float32Tensor(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Float32Tensor defaultInstance;
    public static Float32Tensor getDefaultInstance() {
      return defaultInstance;
    }

    public Float32Tensor getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Float32Tensor(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 13: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                values_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00000001;
              }
              values_.add(input.readFloat());
              break;
            }
            case 10: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001) && input.getBytesUntilLimit() > 0) {
                values_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00000001;
              }
              while (input.getBytesUntilLimit() > 0) {
                values_.add(input.readFloat());
              }
              input.popLimit(limit);
              break;
            }
            case 16: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                keys_ = new java.util.ArrayList<java.lang.Long>();
                mutable_bitField0_ |= 0x00000002;
              }
              keys_.add(input.readUInt64());
              break;
            }
            case 18: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                keys_ = new java.util.ArrayList<java.lang.Long>();
                mutable_bitField0_ |= 0x00000002;
              }
              while (input.getBytesUntilLimit() > 0) {
                keys_.add(input.readUInt64());
              }
              input.popLimit(limit);
              break;
            }
            case 24: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                shape_ = new java.util.ArrayList<java.lang.Long>();
                mutable_bitField0_ |= 0x00000004;
              }
              shape_.add(input.readUInt64());
              break;
            }
            case 26: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004) && input.getBytesUntilLimit() > 0) {
                shape_ = new java.util.ArrayList<java.lang.Long>();
                mutable_bitField0_ |= 0x00000004;
              }
              while (input.getBytesUntilLimit() > 0) {
                shape_.add(input.readUInt64());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          values_ = java.util.Collections.unmodifiableList(values_);
        }
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          keys_ = java.util.Collections.unmodifiableList(keys_);
        }
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          shape_ = java.util.Collections.unmodifiableList(shape_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return aialgorithms.proto2.RecordProto2.internal_static_aialgorithms_proto2_Float32Tensor_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return aialgorithms.proto2.RecordProto2.internal_static_aialgorithms_proto2_Float32Tensor_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              aialgorithms.proto2.RecordProto2.Float32Tensor.class, aialgorithms.proto2.RecordProto2.Float32Tensor.Builder.class);
    }

    public static com.google.protobuf.Parser<Float32Tensor> PARSER =
        new com.google.protobuf.AbstractParser<Float32Tensor>() {
      public Float32Tensor parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Float32Tensor(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Float32Tensor> getParserForType() {
      return PARSER;
    }

    // repeated float values = 1 [packed = true];
    public static final int VALUES_FIELD_NUMBER = 1;
    private java.util.List<java.lang.Float> values_;
    /**
     * <code>repeated float values = 1 [packed = true];</code>
     *
     * <pre>
     * Each value in the vector. If keys is empty this is treated as a
     * dense vector.
     * </pre>
     */
    public java.util.List<java.lang.Float>
        getValuesList() {
      return values_;
    }
    /**
     * <code>repeated float values = 1 [packed = true];</code>
     *
     * <pre>
     * Each value in the vector. If keys is empty this is treated as a
     * dense vector.
     * </pre>
     */
    public int getValuesCount() {
      return values_.size();
    }
    /**
     * <code>repeated float values = 1 [packed = true];</code>
     *
     * <pre>
     * Each value in the vector. If keys is empty this is treated as a
     * dense vector.
     * </pre>
     */
    public float getValues(int index) {
      return values_.get(index);
    }
    private int valuesMemoizedSerializedSize = -1;

    // repeated uint64 keys = 2 [packed = true];
    public static final int KEYS_FIELD_NUMBER = 2;
    private java.util.List<java.lang.Long> keys_;
    /**
     * <code>repeated uint64 keys = 2 [packed = true];</code>
     *
     * <pre>
     * If not empty then the vector is treated as sparse with
     * each key specifying the location of the value in the sparse vector.
     * </pre>
     */
    public java.util.List<java.lang.Long>
        getKeysList() {
      return keys_;
    }
    /**
     * <code>repeated uint64 keys = 2 [packed = true];</code>
     *
     * <pre>
     * If not empty then the vector is treated as sparse with
     * each key specifying the location of the value in the sparse vector.
     * </pre>
     */
    public int getKeysCount() {
      return keys_.size();
    }
    /**
     * <code>repeated uint64 keys = 2 [packed = true];</code>
     *
     * <pre>
     * If not empty then the vector is treated as sparse with
     * each key specifying the location of the value in the sparse vector.
     * </pre>
     */
    public long getKeys(int index) {
      return keys_.get(index);
    }
    private int keysMemoizedSerializedSize = -1;

    // repeated uint64 shape = 3 [packed = true];
    public static final int SHAPE_FIELD_NUMBER = 3;
    private java.util.List<java.lang.Long> shape_;
    /**
     * <code>repeated uint64 shape = 3 [packed = true];</code>
     *
     * <pre>
     * Optional shape which will allow the vector to represent a matrix.
     * e.g. if shape = [ 10, 20 ] then floor(keys[i] / 10) will give the row
     * and keys[i] % 20 will give the column.
     * This also supports n-dimensonal tensors.
     * NB. this must be specified if the tensor is sparse.
     * </pre>
     */
    public java.util.List<java.lang.Long>
        getShapeList() {
      return shape_;
    }
    /**
     * <code>repeated uint64 shape = 3 [packed = true];</code>
     *
     * <pre>
     * Optional shape which will allow the vector to represent a matrix.
     * e.g. if shape = [ 10, 20 ] then floor(keys[i] / 10) will give the row
     * and keys[i] % 20 will give the column.
     * This also supports n-dimensonal tensors.
     * NB. this must be specified if the tensor is sparse.
     * </pre>
     */
    public int getShapeCount() {
      return shape_.size();
    }
    /**
     * <code>repeated uint64 shape = 3 [packed = true];</code>
     *
     * <pre>
     * Optional shape which will allow the vector to represent a matrix.
     * e.g. if shape = [ 10, 20 ] then floor(keys[i] / 10) will give the row
     * and keys[i] % 20 will give the column.
     * This also supports n-dimensonal tensors.
     * NB. this must be specified if the tensor is sparse.
     * </pre>
     */
    public long getShape(int index) {
      return shape_.get(index);
    }
    private int shapeMemoizedSerializedSize = -1;

    private void initFields() {
      values_ = java.util.Collections.emptyList();
      keys_ = java.util.Collections.emptyList();
      shape_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (getValuesList().size() > 0) {
        output.writeRawVarint32(10);
        output.writeRawVarint32(valuesMemoizedSerializedSize);
      }
      for (int i = 0; i < values_.size(); i++) {
        output.writeFloatNoTag(values_.get(i));
      }
      if (getKeysList().size() > 0) {
        output.writeRawVarint32(18);
        output.writeRawVarint32(keysMemoizedSerializedSize);
      }
      for (int i = 0; i < keys_.size(); i++) {
        output.writeUInt64NoTag(keys_.get(i));
      }
      if (getShapeList().size() > 0) {
        output.writeRawVarint32(26);
        output.writeRawVarint32(shapeMemoizedSerializedSize);
      }
      for (int i = 0; i < shape_.size(); i++) {
        output.writeUInt64NoTag(shape_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        dataSize = 4 * getValuesList().size();
        size += dataSize;
        if (!getValuesList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        valuesMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        for (int i = 0; i < keys_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeUInt64SizeNoTag(keys_.get(i));
        }
        size += dataSize;
        if (!getKeysList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        keysMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        for (int i = 0; i < shape_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeUInt64SizeNoTag(shape_.get(i));
        }
        size += dataSize;
        if (!getShapeList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        shapeMemoizedSerializedSize = dataSize;
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static aialgorithms.proto2.RecordProto2.Float32Tensor parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static aialgorithms.proto2.RecordProto2.Float32Tensor parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static aialgorithms.proto2.RecordProto2.Float32Tensor parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static aialgorithms.proto2.RecordProto2.Float32Tensor parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static aialgorithms.proto2.RecordProto2.Float32Tensor parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static aialgorithms.proto2.RecordProto2.Float32Tensor parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static aialgorithms.proto2.RecordProto2.Float32Tensor parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static aialgorithms.proto2.RecordProto2.Float32Tensor parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static aialgorithms.proto2.RecordProto2.Float32Tensor parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static aialgorithms.proto2.RecordProto2.Float32Tensor parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(aialgorithms.proto2.RecordProto2.Float32Tensor prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code aialgorithms.proto2.Float32Tensor}
     *
     * <pre>
     * A sparse or dense rank-R tensor that stores data as doubles (float64).
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements aialgorithms.proto2.RecordProto2.Float32TensorOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return aialgorithms.proto2.RecordProto2.internal_static_aialgorithms_proto2_Float32Tensor_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return aialgorithms.proto2.RecordProto2.internal_static_aialgorithms_proto2_Float32Tensor_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                aialgorithms.proto2.RecordProto2.Float32Tensor.class, aialgorithms.proto2.RecordProto2.Float32Tensor.Builder.class);
      }

      // Construct using aialgorithms.proto2.RecordProto2.Float32Tensor.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        values_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        keys_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        shape_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return aialgorithms.proto2.RecordProto2.internal_static_aialgorithms_proto2_Float32Tensor_descriptor;
      }

      public aialgorithms.proto2.RecordProto2.Float32Tensor getDefaultInstanceForType() {
        return aialgorithms.proto2.RecordProto2.Float32Tensor.getDefaultInstance();
      }

      public aialgorithms.proto2.RecordProto2.Float32Tensor build() {
        aialgorithms.proto2.RecordProto2.Float32Tensor result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public aialgorithms.proto2.RecordProto2.Float32Tensor buildPartial() {
        aialgorithms.proto2.RecordProto2.Float32Tensor result = new aialgorithms.proto2.RecordProto2.Float32Tensor(this);
        int from_bitField0_ = bitField0_;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          values_ = java.util.Collections.unmodifiableList(values_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.values_ = values_;
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          keys_ = java.util.Collections.unmodifiableList(keys_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.keys_ = keys_;
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          shape_ = java.util.Collections.unmodifiableList(shape_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.shape_ = shape_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof aialgorithms.proto2.RecordProto2.Float32Tensor) {
          return mergeFrom((aialgorithms.proto2.RecordProto2.Float32Tensor)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(aialgorithms.proto2.RecordProto2.Float32Tensor other) {
        if (other == aialgorithms.proto2.RecordProto2.Float32Tensor.getDefaultInstance()) return this;
        if (!other.values_.isEmpty()) {
          if (values_.isEmpty()) {
            values_ = other.values_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureValuesIsMutable();
            values_.addAll(other.values_);
          }
          onChanged();
        }
        if (!other.keys_.isEmpty()) {
          if (keys_.isEmpty()) {
            keys_ = other.keys_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureKeysIsMutable();
            keys_.addAll(other.keys_);
          }
          onChanged();
        }
        if (!other.shape_.isEmpty()) {
          if (shape_.isEmpty()) {
            shape_ = other.shape_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureShapeIsMutable();
            shape_.addAll(other.shape_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        aialgorithms.proto2.RecordProto2.Float32Tensor parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (aialgorithms.proto2.RecordProto2.Float32Tensor) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // repeated float values = 1 [packed = true];
      private java.util.List<java.lang.Float> values_ = java.util.Collections.emptyList();
      private void ensureValuesIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          values_ = new java.util.ArrayList<java.lang.Float>(values_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <code>repeated float values = 1 [packed = true];</code>
       *
       * <pre>
       * Each value in the vector. If keys is empty this is treated as a
       * dense vector.
       * </pre>
       */
      public java.util.List<java.lang.Float>
          getValuesList() {
        return java.util.Collections.unmodifiableList(values_);
      }
      /**
       * <code>repeated float values = 1 [packed = true];</code>
       *
       * <pre>
       * Each value in the vector. If keys is empty this is treated as a
       * dense vector.
       * </pre>
       */
      public int getValuesCount() {
        return values_.size();
      }
      /**
       * <code>repeated float values = 1 [packed = true];</code>
       *
       * <pre>
       * Each value in the vector. If keys is empty this is treated as a
       * dense vector.
       * </pre>
       */
      public float getValues(int index) {
        return values_.get(index);
      }
      /**
       * <code>repeated float values = 1 [packed = true];</code>
       *
       * <pre>
       * Each value in the vector. If keys is empty this is treated as a
       * dense vector.
       * </pre>
       */
      public Builder setValues(
          int index, float value) {
        ensureValuesIsMutable();
        values_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float values = 1 [packed = true];</code>
       *
       * <pre>
       * Each value in the vector. If keys is empty this is treated as a
       * dense vector.
       * </pre>
       */
      public Builder addValues(float value) {
        ensureValuesIsMutable();
        values_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float values = 1 [packed = true];</code>
       *
       * <pre>
       * Each value in the vector. If keys is empty this is treated as a
       * dense vector.
       * </pre>
       */
      public Builder addAllValues(
          java.lang.Iterable<? extends java.lang.Float> values) {
        ensureValuesIsMutable();
        super.addAll(values, values_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float values = 1 [packed = true];</code>
       *
       * <pre>
       * Each value in the vector. If keys is empty this is treated as a
       * dense vector.
       * </pre>
       */
      public Builder clearValues() {
        values_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }

      // repeated uint64 keys = 2 [packed = true];
      private java.util.List<java.lang.Long> keys_ = java.util.Collections.emptyList();
      private void ensureKeysIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          keys_ = new java.util.ArrayList<java.lang.Long>(keys_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <code>repeated uint64 keys = 2 [packed = true];</code>
       *
       * <pre>
       * If not empty then the vector is treated as sparse with
       * each key specifying the location of the value in the sparse vector.
       * </pre>
       */
      public java.util.List<java.lang.Long>
          getKeysList() {
        return java.util.Collections.unmodifiableList(keys_);
      }
      /**
       * <code>repeated uint64 keys = 2 [packed = true];</code>
       *
       * <pre>
       * If not empty then the vector is treated as sparse with
       * each key specifying the location of the value in the sparse vector.
       * </pre>
       */
      public int getKeysCount() {
        return keys_.size();
      }
      /**
       * <code>repeated uint64 keys = 2 [packed = true];</code>
       *
       * <pre>
       * If not empty then the vector is treated as sparse with
       * each key specifying the location of the value in the sparse vector.
       * </pre>
       */
      public long getKeys(int index) {
        return keys_.get(index);
      }
      /**
       * <code>repeated uint64 keys = 2 [packed = true];</code>
       *
       * <pre>
       * If not empty then the vector is treated as sparse with
       * each key specifying the location of the value in the sparse vector.
       * </pre>
       */
      public Builder setKeys(
          int index, long value) {
        ensureKeysIsMutable();
        keys_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint64 keys = 2 [packed = true];</code>
       *
       * <pre>
       * If not empty then the vector is treated as sparse with
       * each key specifying the location of the value in the sparse vector.
       * </pre>
       */
      public Builder addKeys(long value) {
        ensureKeysIsMutable();
        keys_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint64 keys = 2 [packed = true];</code>
       *
       * <pre>
       * If not empty then the vector is treated as sparse with
       * each key specifying the location of the value in the sparse vector.
       * </pre>
       */
      public Builder addAllKeys(
          java.lang.Iterable<? extends java.lang.Long> values) {
        ensureKeysIsMutable();
        super.addAll(values, keys_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint64 keys = 2 [packed = true];</code>
       *
       * <pre>
       * If not empty then the vector is treated as sparse with
       * each key specifying the location of the value in the sparse vector.
       * </pre>
       */
      public Builder clearKeys() {
        keys_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      // repeated uint64 shape = 3 [packed = true];
      private java.util.List<java.lang.Long> shape_ = java.util.Collections.emptyList();
      private void ensureShapeIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          shape_ = new java.util.ArrayList<java.lang.Long>(shape_);
          bitField0_ |= 0x00000004;
         }
      }
      /**
       * <code>repeated uint64 shape = 3 [packed = true];</code>
       *
       * <pre>
       * Optional shape which will allow the vector to represent a matrix.
       * e.g. if shape = [ 10, 20 ] then floor(keys[i] / 10) will give the row
       * and keys[i] % 20 will give the column.
       * This also supports n-dimensonal tensors.
       * NB. this must be specified if the tensor is sparse.
       * </pre>
       */
      public java.util.List<java.lang.Long>
          getShapeList() {
        return java.util.Collections.unmodifiableList(shape_);
      }
      /**
       * <code>repeated uint64 shape = 3 [packed = true];</code>
       *
       * <pre>
       * Optional shape which will allow the vector to represent a matrix.
       * e.g. if shape = [ 10, 20 ] then floor(keys[i] / 10) will give the row
       * and keys[i] % 20 will give the column.
       * This also supports n-dimensonal tensors.
       * NB. this must be specified if the tensor is sparse.
       * </pre>
       */
      public int getShapeCount() {
        return shape_.size();
      }
      /**
       * <code>repeated uint64 shape = 3 [packed = true];</code>
       *
       * <pre>
       * Optional shape which will allow the vector to represent a matrix.
       * e.g. if shape = [ 10, 20 ] then floor(keys[i] / 10) will give the row
       * and keys[i] % 20 will give the column.
       * This also supports n-dimensonal tensors.
       * NB. this must be specified if the tensor is sparse.
       * </pre>
       */
      public long getShape(int index) {
        return shape_.get(index);
      }
      /**
       * <code>repeated uint64 shape = 3 [packed = true];</code>
       *
       * <pre>
       * Optional shape which will allow the vector to represent a matrix.
       * e.g. if shape = [ 10, 20 ] then floor(keys[i] / 10) will give the row
       * and keys[i] % 20 will give the column.
       * This also supports n-dimensonal tensors.
       * NB. this must be specified if the tensor is sparse.
       * </pre>
       */
      public Builder setShape(
          int index, long value) {
        ensureShapeIsMutable();
        shape_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint64 shape = 3 [packed = true];</code>
       *
       * <pre>
       * Optional shape which will allow the vector to represent a matrix.
       * e.g. if shape = [ 10, 20 ] then floor(keys[i] / 10) will give the row
       * and keys[i] % 20 will give the column.
       * This also supports n-dimensonal tensors.
       * NB. this must be specified if the tensor is sparse.
       * </pre>
       */
      public Builder addShape(long value) {
        ensureShapeIsMutable();
        shape_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint64 shape = 3 [packed = true];</code>
       *
       * <pre>
       * Optional shape which will allow the vector to represent a matrix.
       * e.g. if shape = [ 10, 20 ] then floor(keys[i] / 10) will give the row
       * and keys[i] % 20 will give the column.
       * This also supports n-dimensonal tensors.
       * NB. this must be specified if the tensor is sparse.
       * </pre>
       */
      public Builder addAllShape(
          java.lang.Iterable<? extends java.lang.Long> values) {
        ensureShapeIsMutable();
        super.addAll(values, shape_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint64 shape = 3 [packed = true];</code>
       *
       * <pre>
       * Optional shape which will allow the vector to represent a matrix.
       * e.g. if shape = [ 10, 20 ] then floor(keys[i] / 10) will give the row
       * and keys[i] % 20 will give the column.
       * This also supports n-dimensonal tensors.
       * NB. this must be specified if the tensor is sparse.
       * </pre>
       */
      public Builder clearShape() {
        shape_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:aialgorithms.proto2.Float32Tensor)
    }

    static {
      defaultInstance = new Float32Tensor(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:aialgorithms.proto2.Float32Tensor)
  }

  public interface Float64TensorOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // repeated double values = 1 [packed = true];
    /**
     * <code>repeated double values = 1 [packed = true];</code>
     *
     * <pre>
     * Each value in the vector. If keys is empty this is treated as a
     * dense vector.
     * </pre>
     */
    java.util.List<java.lang.Double> getValuesList();
    /**
     * <code>repeated double values = 1 [packed = true];</code>
     *
     * <pre>
     * Each value in the vector. If keys is empty this is treated as a
     * dense vector.
     * </pre>
     */
    int getValuesCount();
    /**
     * <code>repeated double values = 1 [packed = true];</code>
     *
     * <pre>
     * Each value in the vector. If keys is empty this is treated as a
     * dense vector.
     * </pre>
     */
    double getValues(int index);

    // repeated uint64 keys = 2 [packed = true];
    /**
     * <code>repeated uint64 keys = 2 [packed = true];</code>
     *
     * <pre>
     * If not empty then the vector is treated as sparse with
     * each key specifying the location of the value in the sparse vector.
     * </pre>
     */
    java.util.List<java.lang.Long> getKeysList();
    /**
     * <code>repeated uint64 keys = 2 [packed = true];</code>
     *
     * <pre>
     * If not empty then the vector is treated as sparse with
     * each key specifying the location of the value in the sparse vector.
     * </pre>
     */
    int getKeysCount();
    /**
     * <code>repeated uint64 keys = 2 [packed = true];</code>
     *
     * <pre>
     * If not empty then the vector is treated as sparse with
     * each key specifying the location of the value in the sparse vector.
     * </pre>
     */
    long getKeys(int index);

    // repeated uint64 shape = 3 [packed = true];
    /**
     * <code>repeated uint64 shape = 3 [packed = true];</code>
     *
     * <pre>
     * Optional shape which will allow the vector to represent a matrix.
     * e.g. if shape = [ 10, 20 ] then floor(keys[i] / 10) will give the row
     * and keys[i] % 20 will give the column.
     * This also supports n-dimensonal tensors.
     * NB. this must be specified if the tensor is sparse.
     * </pre>
     */
    java.util.List<java.lang.Long> getShapeList();
    /**
     * <code>repeated uint64 shape = 3 [packed = true];</code>
     *
     * <pre>
     * Optional shape which will allow the vector to represent a matrix.
     * e.g. if shape = [ 10, 20 ] then floor(keys[i] / 10) will give the row
     * and keys[i] % 20 will give the column.
     * This also supports n-dimensonal tensors.
     * NB. this must be specified if the tensor is sparse.
     * </pre>
     */
    int getShapeCount();
    /**
     * <code>repeated uint64 shape = 3 [packed = true];</code>
     *
     * <pre>
     * Optional shape which will allow the vector to represent a matrix.
     * e.g. if shape = [ 10, 20 ] then floor(keys[i] / 10) will give the row
     * and keys[i] % 20 will give the column.
     * This also supports n-dimensonal tensors.
     * NB. this must be specified if the tensor is sparse.
     * </pre>
     */
    long getShape(int index);
  }
  /**
   * Protobuf type {@code aialgorithms.proto2.Float64Tensor}
   *
   * <pre>
   * A sparse or dense rank-R tensor that stores data as doubles (float64).
   * </pre>
   */
  public static final class Float64Tensor extends
      com.google.protobuf.GeneratedMessage
      implements Float64TensorOrBuilder {
    // Use Float64Tensor.newBuilder() to construct.
    private Float64Tensor(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Float64Tensor(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Float64Tensor defaultInstance;
    public static Float64Tensor getDefaultInstance() {
      return defaultInstance;
    }

    public Float64Tensor getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Float64Tensor(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 9: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                values_ = new java.util.ArrayList<java.lang.Double>();
                mutable_bitField0_ |= 0x00000001;
              }
              values_.add(input.readDouble());
              break;
            }
            case 10: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001) && input.getBytesUntilLimit() > 0) {
                values_ = new java.util.ArrayList<java.lang.Double>();
                mutable_bitField0_ |= 0x00000001;
              }
              while (input.getBytesUntilLimit() > 0) {
                values_.add(input.readDouble());
              }
              input.popLimit(limit);
              break;
            }
            case 16: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                keys_ = new java.util.ArrayList<java.lang.Long>();
                mutable_bitField0_ |= 0x00000002;
              }
              keys_.add(input.readUInt64());
              break;
            }
            case 18: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                keys_ = new java.util.ArrayList<java.lang.Long>();
                mutable_bitField0_ |= 0x00000002;
              }
              while (input.getBytesUntilLimit() > 0) {
                keys_.add(input.readUInt64());
              }
              input.popLimit(limit);
              break;
            }
            case 24: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                shape_ = new java.util.ArrayList<java.lang.Long>();
                mutable_bitField0_ |= 0x00000004;
              }
              shape_.add(input.readUInt64());
              break;
            }
            case 26: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004) && input.getBytesUntilLimit() > 0) {
                shape_ = new java.util.ArrayList<java.lang.Long>();
                mutable_bitField0_ |= 0x00000004;
              }
              while (input.getBytesUntilLimit() > 0) {
                shape_.add(input.readUInt64());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          values_ = java.util.Collections.unmodifiableList(values_);
        }
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          keys_ = java.util.Collections.unmodifiableList(keys_);
        }
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          shape_ = java.util.Collections.unmodifiableList(shape_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return aialgorithms.proto2.RecordProto2.internal_static_aialgorithms_proto2_Float64Tensor_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return aialgorithms.proto2.RecordProto2.internal_static_aialgorithms_proto2_Float64Tensor_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              aialgorithms.proto2.RecordProto2.Float64Tensor.class, aialgorithms.proto2.RecordProto2.Float64Tensor.Builder.class);
    }

    public static com.google.protobuf.Parser<Float64Tensor> PARSER =
        new com.google.protobuf.AbstractParser<Float64Tensor>() {
      public Float64Tensor parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Float64Tensor(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Float64Tensor> getParserForType() {
      return PARSER;
    }

    // repeated double values = 1 [packed = true];
    public static final int VALUES_FIELD_NUMBER = 1;
    private java.util.List<java.lang.Double> values_;
    /**
     * <code>repeated double values = 1 [packed = true];</code>
     *
     * <pre>
     * Each value in the vector. If keys is empty this is treated as a
     * dense vector.
     * </pre>
     */
    public java.util.List<java.lang.Double>
        getValuesList() {
      return values_;
    }
    /**
     * <code>repeated double values = 1 [packed = true];</code>
     *
     * <pre>
     * Each value in the vector. If keys is empty this is treated as a
     * dense vector.
     * </pre>
     */
    public int getValuesCount() {
      return values_.size();
    }
    /**
     * <code>repeated double values = 1 [packed = true];</code>
     *
     * <pre>
     * Each value in the vector. If keys is empty this is treated as a
     * dense vector.
     * </pre>
     */
    public double getValues(int index) {
      return values_.get(index);
    }
    private int valuesMemoizedSerializedSize = -1;

    // repeated uint64 keys = 2 [packed = true];
    public static final int KEYS_FIELD_NUMBER = 2;
    private java.util.List<java.lang.Long> keys_;
    /**
     * <code>repeated uint64 keys = 2 [packed = true];</code>
     *
     * <pre>
     * If not empty then the vector is treated as sparse with
     * each key specifying the location of the value in the sparse vector.
     * </pre>
     */
    public java.util.List<java.lang.Long>
        getKeysList() {
      return keys_;
    }
    /**
     * <code>repeated uint64 keys = 2 [packed = true];</code>
     *
     * <pre>
     * If not empty then the vector is treated as sparse with
     * each key specifying the location of the value in the sparse vector.
     * </pre>
     */
    public int getKeysCount() {
      return keys_.size();
    }
    /**
     * <code>repeated uint64 keys = 2 [packed = true];</code>
     *
     * <pre>
     * If not empty then the vector is treated as sparse with
     * each key specifying the location of the value in the sparse vector.
     * </pre>
     */
    public long getKeys(int index) {
      return keys_.get(index);
    }
    private int keysMemoizedSerializedSize = -1;

    // repeated uint64 shape = 3 [packed = true];
    public static final int SHAPE_FIELD_NUMBER = 3;
    private java.util.List<java.lang.Long> shape_;
    /**
     * <code>repeated uint64 shape = 3 [packed = true];</code>
     *
     * <pre>
     * Optional shape which will allow the vector to represent a matrix.
     * e.g. if shape = [ 10, 20 ] then floor(keys[i] / 10) will give the row
     * and keys[i] % 20 will give the column.
     * This also supports n-dimensonal tensors.
     * NB. this must be specified if the tensor is sparse.
     * </pre>
     */
    public java.util.List<java.lang.Long>
        getShapeList() {
      return shape_;
    }
    /**
     * <code>repeated uint64 shape = 3 [packed = true];</code>
     *
     * <pre>
     * Optional shape which will allow the vector to represent a matrix.
     * e.g. if shape = [ 10, 20 ] then floor(keys[i] / 10) will give the row
     * and keys[i] % 20 will give the column.
     * This also supports n-dimensonal tensors.
     * NB. this must be specified if the tensor is sparse.
     * </pre>
     */
    public int getShapeCount() {
      return shape_.size();
    }
    /**
     * <code>repeated uint64 shape = 3 [packed = true];</code>
     *
     * <pre>
     * Optional shape which will allow the vector to represent a matrix.
     * e.g. if shape = [ 10, 20 ] then floor(keys[i] / 10) will give the row
     * and keys[i] % 20 will give the column.
     * This also supports n-dimensonal tensors.
     * NB. this must be specified if the tensor is sparse.
     * </pre>
     */
    public long getShape(int index) {
      return shape_.get(index);
    }
    private int shapeMemoizedSerializedSize = -1;

    private void initFields() {
      values_ = java.util.Collections.emptyList();
      keys_ = java.util.Collections.emptyList();
      shape_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (getValuesList().size() > 0) {
        output.writeRawVarint32(10);
        output.writeRawVarint32(valuesMemoizedSerializedSize);
      }
      for (int i = 0; i < values_.size(); i++) {
        output.writeDoubleNoTag(values_.get(i));
      }
      if (getKeysList().size() > 0) {
        output.writeRawVarint32(18);
        output.writeRawVarint32(keysMemoizedSerializedSize);
      }
      for (int i = 0; i < keys_.size(); i++) {
        output.writeUInt64NoTag(keys_.get(i));
      }
      if (getShapeList().size() > 0) {
        output.writeRawVarint32(26);
        output.writeRawVarint32(shapeMemoizedSerializedSize);
      }
      for (int i = 0; i < shape_.size(); i++) {
        output.writeUInt64NoTag(shape_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        dataSize = 8 * getValuesList().size();
        size += dataSize;
        if (!getValuesList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        valuesMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        for (int i = 0; i < keys_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeUInt64SizeNoTag(keys_.get(i));
        }
        size += dataSize;
        if (!getKeysList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        keysMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        for (int i = 0; i < shape_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeUInt64SizeNoTag(shape_.get(i));
        }
        size += dataSize;
        if (!getShapeList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        shapeMemoizedSerializedSize = dataSize;
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static aialgorithms.proto2.RecordProto2.Float64Tensor parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static aialgorithms.proto2.RecordProto2.Float64Tensor parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static aialgorithms.proto2.RecordProto2.Float64Tensor parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static aialgorithms.proto2.RecordProto2.Float64Tensor parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static aialgorithms.proto2.RecordProto2.Float64Tensor parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static aialgorithms.proto2.RecordProto2.Float64Tensor parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static aialgorithms.proto2.RecordProto2.Float64Tensor parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static aialgorithms.proto2.RecordProto2.Float64Tensor parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static aialgorithms.proto2.RecordProto2.Float64Tensor parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static aialgorithms.proto2.RecordProto2.Float64Tensor parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(aialgorithms.proto2.RecordProto2.Float64Tensor prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code aialgorithms.proto2.Float64Tensor}
     *
     * <pre>
     * A sparse or dense rank-R tensor that stores data as doubles (float64).
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements aialgorithms.proto2.RecordProto2.Float64TensorOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return aialgorithms.proto2.RecordProto2.internal_static_aialgorithms_proto2_Float64Tensor_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return aialgorithms.proto2.RecordProto2.internal_static_aialgorithms_proto2_Float64Tensor_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                aialgorithms.proto2.RecordProto2.Float64Tensor.class, aialgorithms.proto2.RecordProto2.Float64Tensor.Builder.class);
      }

      // Construct using aialgorithms.proto2.RecordProto2.Float64Tensor.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        values_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        keys_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        shape_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return aialgorithms.proto2.RecordProto2.internal_static_aialgorithms_proto2_Float64Tensor_descriptor;
      }

      public aialgorithms.proto2.RecordProto2.Float64Tensor getDefaultInstanceForType() {
        return aialgorithms.proto2.RecordProto2.Float64Tensor.getDefaultInstance();
      }

      public aialgorithms.proto2.RecordProto2.Float64Tensor build() {
        aialgorithms.proto2.RecordProto2.Float64Tensor result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public aialgorithms.proto2.RecordProto2.Float64Tensor buildPartial() {
        aialgorithms.proto2.RecordProto2.Float64Tensor result = new aialgorithms.proto2.RecordProto2.Float64Tensor(this);
        int from_bitField0_ = bitField0_;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          values_ = java.util.Collections.unmodifiableList(values_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.values_ = values_;
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          keys_ = java.util.Collections.unmodifiableList(keys_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.keys_ = keys_;
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          shape_ = java.util.Collections.unmodifiableList(shape_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.shape_ = shape_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof aialgorithms.proto2.RecordProto2.Float64Tensor) {
          return mergeFrom((aialgorithms.proto2.RecordProto2.Float64Tensor)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(aialgorithms.proto2.RecordProto2.Float64Tensor other) {
        if (other == aialgorithms.proto2.RecordProto2.Float64Tensor.getDefaultInstance()) return this;
        if (!other.values_.isEmpty()) {
          if (values_.isEmpty()) {
            values_ = other.values_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureValuesIsMutable();
            values_.addAll(other.values_);
          }
          onChanged();
        }
        if (!other.keys_.isEmpty()) {
          if (keys_.isEmpty()) {
            keys_ = other.keys_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureKeysIsMutable();
            keys_.addAll(other.keys_);
          }
          onChanged();
        }
        if (!other.shape_.isEmpty()) {
          if (shape_.isEmpty()) {
            shape_ = other.shape_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureShapeIsMutable();
            shape_.addAll(other.shape_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        aialgorithms.proto2.RecordProto2.Float64Tensor parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (aialgorithms.proto2.RecordProto2.Float64Tensor) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // repeated double values = 1 [packed = true];
      private java.util.List<java.lang.Double> values_ = java.util.Collections.emptyList();
      private void ensureValuesIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          values_ = new java.util.ArrayList<java.lang.Double>(values_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <code>repeated double values = 1 [packed = true];</code>
       *
       * <pre>
       * Each value in the vector. If keys is empty this is treated as a
       * dense vector.
       * </pre>
       */
      public java.util.List<java.lang.Double>
          getValuesList() {
        return java.util.Collections.unmodifiableList(values_);
      }
      /**
       * <code>repeated double values = 1 [packed = true];</code>
       *
       * <pre>
       * Each value in the vector. If keys is empty this is treated as a
       * dense vector.
       * </pre>
       */
      public int getValuesCount() {
        return values_.size();
      }
      /**
       * <code>repeated double values = 1 [packed = true];</code>
       *
       * <pre>
       * Each value in the vector. If keys is empty this is treated as a
       * dense vector.
       * </pre>
       */
      public double getValues(int index) {
        return values_.get(index);
      }
      /**
       * <code>repeated double values = 1 [packed = true];</code>
       *
       * <pre>
       * Each value in the vector. If keys is empty this is treated as a
       * dense vector.
       * </pre>
       */
      public Builder setValues(
          int index, double value) {
        ensureValuesIsMutable();
        values_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double values = 1 [packed = true];</code>
       *
       * <pre>
       * Each value in the vector. If keys is empty this is treated as a
       * dense vector.
       * </pre>
       */
      public Builder addValues(double value) {
        ensureValuesIsMutable();
        values_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double values = 1 [packed = true];</code>
       *
       * <pre>
       * Each value in the vector. If keys is empty this is treated as a
       * dense vector.
       * </pre>
       */
      public Builder addAllValues(
          java.lang.Iterable<? extends java.lang.Double> values) {
        ensureValuesIsMutable();
        super.addAll(values, values_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double values = 1 [packed = true];</code>
       *
       * <pre>
       * Each value in the vector. If keys is empty this is treated as a
       * dense vector.
       * </pre>
       */
      public Builder clearValues() {
        values_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }

      // repeated uint64 keys = 2 [packed = true];
      private java.util.List<java.lang.Long> keys_ = java.util.Collections.emptyList();
      private void ensureKeysIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          keys_ = new java.util.ArrayList<java.lang.Long>(keys_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <code>repeated uint64 keys = 2 [packed = true];</code>
       *
       * <pre>
       * If not empty then the vector is treated as sparse with
       * each key specifying the location of the value in the sparse vector.
       * </pre>
       */
      public java.util.List<java.lang.Long>
          getKeysList() {
        return java.util.Collections.unmodifiableList(keys_);
      }
      /**
       * <code>repeated uint64 keys = 2 [packed = true];</code>
       *
       * <pre>
       * If not empty then the vector is treated as sparse with
       * each key specifying the location of the value in the sparse vector.
       * </pre>
       */
      public int getKeysCount() {
        return keys_.size();
      }
      /**
       * <code>repeated uint64 keys = 2 [packed = true];</code>
       *
       * <pre>
       * If not empty then the vector is treated as sparse with
       * each key specifying the location of the value in the sparse vector.
       * </pre>
       */
      public long getKeys(int index) {
        return keys_.get(index);
      }
      /**
       * <code>repeated uint64 keys = 2 [packed = true];</code>
       *
       * <pre>
       * If not empty then the vector is treated as sparse with
       * each key specifying the location of the value in the sparse vector.
       * </pre>
       */
      public Builder setKeys(
          int index, long value) {
        ensureKeysIsMutable();
        keys_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint64 keys = 2 [packed = true];</code>
       *
       * <pre>
       * If not empty then the vector is treated as sparse with
       * each key specifying the location of the value in the sparse vector.
       * </pre>
       */
      public Builder addKeys(long value) {
        ensureKeysIsMutable();
        keys_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint64 keys = 2 [packed = true];</code>
       *
       * <pre>
       * If not empty then the vector is treated as sparse with
       * each key specifying the location of the value in the sparse vector.
       * </pre>
       */
      public Builder addAllKeys(
          java.lang.Iterable<? extends java.lang.Long> values) {
        ensureKeysIsMutable();
        super.addAll(values, keys_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint64 keys = 2 [packed = true];</code>
       *
       * <pre>
       * If not empty then the vector is treated as sparse with
       * each key specifying the location of the value in the sparse vector.
       * </pre>
       */
      public Builder clearKeys() {
        keys_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      // repeated uint64 shape = 3 [packed = true];
      private java.util.List<java.lang.Long> shape_ = java.util.Collections.emptyList();
      private void ensureShapeIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          shape_ = new java.util.ArrayList<java.lang.Long>(shape_);
          bitField0_ |= 0x00000004;
         }
      }
      /**
       * <code>repeated uint64 shape = 3 [packed = true];</code>
       *
       * <pre>
       * Optional shape which will allow the vector to represent a matrix.
       * e.g. if shape = [ 10, 20 ] then floor(keys[i] / 10) will give the row
       * and keys[i] % 20 will give the column.
       * This also supports n-dimensonal tensors.
       * NB. this must be specified if the tensor is sparse.
       * </pre>
       */
      public java.util.List<java.lang.Long>
          getShapeList() {
        return java.util.Collections.unmodifiableList(shape_);
      }
      /**
       * <code>repeated uint64 shape = 3 [packed = true];</code>
       *
       * <pre>
       * Optional shape which will allow the vector to represent a matrix.
       * e.g. if shape = [ 10, 20 ] then floor(keys[i] / 10) will give the row
       * and keys[i] % 20 will give the column.
       * This also supports n-dimensonal tensors.
       * NB. this must be specified if the tensor is sparse.
       * </pre>
       */
      public int getShapeCount() {
        return shape_.size();
      }
      /**
       * <code>repeated uint64 shape = 3 [packed = true];</code>
       *
       * <pre>
       * Optional shape which will allow the vector to represent a matrix.
       * e.g. if shape = [ 10, 20 ] then floor(keys[i] / 10) will give the row
       * and keys[i] % 20 will give the column.
       * This also supports n-dimensonal tensors.
       * NB. this must be specified if the tensor is sparse.
       * </pre>
       */
      public long getShape(int index) {
        return shape_.get(index);
      }
      /**
       * <code>repeated uint64 shape = 3 [packed = true];</code>
       *
       * <pre>
       * Optional shape which will allow the vector to represent a matrix.
       * e.g. if shape = [ 10, 20 ] then floor(keys[i] / 10) will give the row
       * and keys[i] % 20 will give the column.
       * This also supports n-dimensonal tensors.
       * NB. this must be specified if the tensor is sparse.
       * </pre>
       */
      public Builder setShape(
          int index, long value) {
        ensureShapeIsMutable();
        shape_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint64 shape = 3 [packed = true];</code>
       *
       * <pre>
       * Optional shape which will allow the vector to represent a matrix.
       * e.g. if shape = [ 10, 20 ] then floor(keys[i] / 10) will give the row
       * and keys[i] % 20 will give the column.
       * This also supports n-dimensonal tensors.
       * NB. this must be specified if the tensor is sparse.
       * </pre>
       */
      public Builder addShape(long value) {
        ensureShapeIsMutable();
        shape_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint64 shape = 3 [packed = true];</code>
       *
       * <pre>
       * Optional shape which will allow the vector to represent a matrix.
       * e.g. if shape = [ 10, 20 ] then floor(keys[i] / 10) will give the row
       * and keys[i] % 20 will give the column.
       * This also supports n-dimensonal tensors.
       * NB. this must be specified if the tensor is sparse.
       * </pre>
       */
      public Builder addAllShape(
          java.lang.Iterable<? extends java.lang.Long> values) {
        ensureShapeIsMutable();
        super.addAll(values, shape_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint64 shape = 3 [packed = true];</code>
       *
       * <pre>
       * Optional shape which will allow the vector to represent a matrix.
       * e.g. if shape = [ 10, 20 ] then floor(keys[i] / 10) will give the row
       * and keys[i] % 20 will give the column.
       * This also supports n-dimensonal tensors.
       * NB. this must be specified if the tensor is sparse.
       * </pre>
       */
      public Builder clearShape() {
        shape_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:aialgorithms.proto2.Float64Tensor)
    }

    static {
      defaultInstance = new Float64Tensor(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:aialgorithms.proto2.Float64Tensor)
  }

  public interface Int32TensorOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // repeated int32 values = 1 [packed = true];
    /**
     * <code>repeated int32 values = 1 [packed = true];</code>
     *
     * <pre>
     * Each value in the vector. If keys is empty this is treated as a
     * dense vector.
     * </pre>
     */
    java.util.List<java.lang.Integer> getValuesList();
    /**
     * <code>repeated int32 values = 1 [packed = true];</code>
     *
     * <pre>
     * Each value in the vector. If keys is empty this is treated as a
     * dense vector.
     * </pre>
     */
    int getValuesCount();
    /**
     * <code>repeated int32 values = 1 [packed = true];</code>
     *
     * <pre>
     * Each value in the vector. If keys is empty this is treated as a
     * dense vector.
     * </pre>
     */
    int getValues(int index);

    // repeated uint64 keys = 2 [packed = true];
    /**
     * <code>repeated uint64 keys = 2 [packed = true];</code>
     *
     * <pre>
     * If not empty then the vector is treated as sparse with
     * each key specifying the location of the value in the sparse vector.
     * </pre>
     */
    java.util.List<java.lang.Long> getKeysList();
    /**
     * <code>repeated uint64 keys = 2 [packed = true];</code>
     *
     * <pre>
     * If not empty then the vector is treated as sparse with
     * each key specifying the location of the value in the sparse vector.
     * </pre>
     */
    int getKeysCount();
    /**
     * <code>repeated uint64 keys = 2 [packed = true];</code>
     *
     * <pre>
     * If not empty then the vector is treated as sparse with
     * each key specifying the location of the value in the sparse vector.
     * </pre>
     */
    long getKeys(int index);

    // repeated uint64 shape = 3 [packed = true];
    /**
     * <code>repeated uint64 shape = 3 [packed = true];</code>
     *
     * <pre>
     * Optional shape which will allow the vector to represent a matrix.
     * e.g. if shape = [ 10, 20 ] then floor(keys[i] / 10) will give the row
     * and keys[i] % 20 will give the column.
     * This also supports n-dimensonal tensors.
     * NB. this must be specified if the tensor is sparse.
     * </pre>
     */
    java.util.List<java.lang.Long> getShapeList();
    /**
     * <code>repeated uint64 shape = 3 [packed = true];</code>
     *
     * <pre>
     * Optional shape which will allow the vector to represent a matrix.
     * e.g. if shape = [ 10, 20 ] then floor(keys[i] / 10) will give the row
     * and keys[i] % 20 will give the column.
     * This also supports n-dimensonal tensors.
     * NB. this must be specified if the tensor is sparse.
     * </pre>
     */
    int getShapeCount();
    /**
     * <code>repeated uint64 shape = 3 [packed = true];</code>
     *
     * <pre>
     * Optional shape which will allow the vector to represent a matrix.
     * e.g. if shape = [ 10, 20 ] then floor(keys[i] / 10) will give the row
     * and keys[i] % 20 will give the column.
     * This also supports n-dimensonal tensors.
     * NB. this must be specified if the tensor is sparse.
     * </pre>
     */
    long getShape(int index);
  }
  /**
   * Protobuf type {@code aialgorithms.proto2.Int32Tensor}
   *
   * <pre>
   * A sparse or dense rank-R tensor that stores data as 32-bit ints (int32).
   * </pre>
   */
  public static final class Int32Tensor extends
      com.google.protobuf.GeneratedMessage
      implements Int32TensorOrBuilder {
    // Use Int32Tensor.newBuilder() to construct.
    private Int32Tensor(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Int32Tensor(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Int32Tensor defaultInstance;
    public static Int32Tensor getDefaultInstance() {
      return defaultInstance;
    }

    public Int32Tensor getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Int32Tensor(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                values_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              values_.add(input.readInt32());
              break;
            }
            case 10: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001) && input.getBytesUntilLimit() > 0) {
                values_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              while (input.getBytesUntilLimit() > 0) {
                values_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 16: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                keys_ = new java.util.ArrayList<java.lang.Long>();
                mutable_bitField0_ |= 0x00000002;
              }
              keys_.add(input.readUInt64());
              break;
            }
            case 18: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                keys_ = new java.util.ArrayList<java.lang.Long>();
                mutable_bitField0_ |= 0x00000002;
              }
              while (input.getBytesUntilLimit() > 0) {
                keys_.add(input.readUInt64());
              }
              input.popLimit(limit);
              break;
            }
            case 24: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                shape_ = new java.util.ArrayList<java.lang.Long>();
                mutable_bitField0_ |= 0x00000004;
              }
              shape_.add(input.readUInt64());
              break;
            }
            case 26: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004) && input.getBytesUntilLimit() > 0) {
                shape_ = new java.util.ArrayList<java.lang.Long>();
                mutable_bitField0_ |= 0x00000004;
              }
              while (input.getBytesUntilLimit() > 0) {
                shape_.add(input.readUInt64());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          values_ = java.util.Collections.unmodifiableList(values_);
        }
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          keys_ = java.util.Collections.unmodifiableList(keys_);
        }
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          shape_ = java.util.Collections.unmodifiableList(shape_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return aialgorithms.proto2.RecordProto2.internal_static_aialgorithms_proto2_Int32Tensor_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return aialgorithms.proto2.RecordProto2.internal_static_aialgorithms_proto2_Int32Tensor_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              aialgorithms.proto2.RecordProto2.Int32Tensor.class, aialgorithms.proto2.RecordProto2.Int32Tensor.Builder.class);
    }

    public static com.google.protobuf.Parser<Int32Tensor> PARSER =
        new com.google.protobuf.AbstractParser<Int32Tensor>() {
      public Int32Tensor parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Int32Tensor(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Int32Tensor> getParserForType() {
      return PARSER;
    }

    // repeated int32 values = 1 [packed = true];
    public static final int VALUES_FIELD_NUMBER = 1;
    private java.util.List<java.lang.Integer> values_;
    /**
     * <code>repeated int32 values = 1 [packed = true];</code>
     *
     * <pre>
     * Each value in the vector. If keys is empty this is treated as a
     * dense vector.
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getValuesList() {
      return values_;
    }
    /**
     * <code>repeated int32 values = 1 [packed = true];</code>
     *
     * <pre>
     * Each value in the vector. If keys is empty this is treated as a
     * dense vector.
     * </pre>
     */
    public int getValuesCount() {
      return values_.size();
    }
    /**
     * <code>repeated int32 values = 1 [packed = true];</code>
     *
     * <pre>
     * Each value in the vector. If keys is empty this is treated as a
     * dense vector.
     * </pre>
     */
    public int getValues(int index) {
      return values_.get(index);
    }
    private int valuesMemoizedSerializedSize = -1;

    // repeated uint64 keys = 2 [packed = true];
    public static final int KEYS_FIELD_NUMBER = 2;
    private java.util.List<java.lang.Long> keys_;
    /**
     * <code>repeated uint64 keys = 2 [packed = true];</code>
     *
     * <pre>
     * If not empty then the vector is treated as sparse with
     * each key specifying the location of the value in the sparse vector.
     * </pre>
     */
    public java.util.List<java.lang.Long>
        getKeysList() {
      return keys_;
    }
    /**
     * <code>repeated uint64 keys = 2 [packed = true];</code>
     *
     * <pre>
     * If not empty then the vector is treated as sparse with
     * each key specifying the location of the value in the sparse vector.
     * </pre>
     */
    public int getKeysCount() {
      return keys_.size();
    }
    /**
     * <code>repeated uint64 keys = 2 [packed = true];</code>
     *
     * <pre>
     * If not empty then the vector is treated as sparse with
     * each key specifying the location of the value in the sparse vector.
     * </pre>
     */
    public long getKeys(int index) {
      return keys_.get(index);
    }
    private int keysMemoizedSerializedSize = -1;

    // repeated uint64 shape = 3 [packed = true];
    public static final int SHAPE_FIELD_NUMBER = 3;
    private java.util.List<java.lang.Long> shape_;
    /**
     * <code>repeated uint64 shape = 3 [packed = true];</code>
     *
     * <pre>
     * Optional shape which will allow the vector to represent a matrix.
     * e.g. if shape = [ 10, 20 ] then floor(keys[i] / 10) will give the row
     * and keys[i] % 20 will give the column.
     * This also supports n-dimensonal tensors.
     * NB. this must be specified if the tensor is sparse.
     * </pre>
     */
    public java.util.List<java.lang.Long>
        getShapeList() {
      return shape_;
    }
    /**
     * <code>repeated uint64 shape = 3 [packed = true];</code>
     *
     * <pre>
     * Optional shape which will allow the vector to represent a matrix.
     * e.g. if shape = [ 10, 20 ] then floor(keys[i] / 10) will give the row
     * and keys[i] % 20 will give the column.
     * This also supports n-dimensonal tensors.
     * NB. this must be specified if the tensor is sparse.
     * </pre>
     */
    public int getShapeCount() {
      return shape_.size();
    }
    /**
     * <code>repeated uint64 shape = 3 [packed = true];</code>
     *
     * <pre>
     * Optional shape which will allow the vector to represent a matrix.
     * e.g. if shape = [ 10, 20 ] then floor(keys[i] / 10) will give the row
     * and keys[i] % 20 will give the column.
     * This also supports n-dimensonal tensors.
     * NB. this must be specified if the tensor is sparse.
     * </pre>
     */
    public long getShape(int index) {
      return shape_.get(index);
    }
    private int shapeMemoizedSerializedSize = -1;

    private void initFields() {
      values_ = java.util.Collections.emptyList();
      keys_ = java.util.Collections.emptyList();
      shape_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (getValuesList().size() > 0) {
        output.writeRawVarint32(10);
        output.writeRawVarint32(valuesMemoizedSerializedSize);
      }
      for (int i = 0; i < values_.size(); i++) {
        output.writeInt32NoTag(values_.get(i));
      }
      if (getKeysList().size() > 0) {
        output.writeRawVarint32(18);
        output.writeRawVarint32(keysMemoizedSerializedSize);
      }
      for (int i = 0; i < keys_.size(); i++) {
        output.writeUInt64NoTag(keys_.get(i));
      }
      if (getShapeList().size() > 0) {
        output.writeRawVarint32(26);
        output.writeRawVarint32(shapeMemoizedSerializedSize);
      }
      for (int i = 0; i < shape_.size(); i++) {
        output.writeUInt64NoTag(shape_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < values_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(values_.get(i));
        }
        size += dataSize;
        if (!getValuesList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        valuesMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        for (int i = 0; i < keys_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeUInt64SizeNoTag(keys_.get(i));
        }
        size += dataSize;
        if (!getKeysList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        keysMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        for (int i = 0; i < shape_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeUInt64SizeNoTag(shape_.get(i));
        }
        size += dataSize;
        if (!getShapeList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        shapeMemoizedSerializedSize = dataSize;
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static aialgorithms.proto2.RecordProto2.Int32Tensor parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static aialgorithms.proto2.RecordProto2.Int32Tensor parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static aialgorithms.proto2.RecordProto2.Int32Tensor parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static aialgorithms.proto2.RecordProto2.Int32Tensor parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static aialgorithms.proto2.RecordProto2.Int32Tensor parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static aialgorithms.proto2.RecordProto2.Int32Tensor parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static aialgorithms.proto2.RecordProto2.Int32Tensor parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static aialgorithms.proto2.RecordProto2.Int32Tensor parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static aialgorithms.proto2.RecordProto2.Int32Tensor parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static aialgorithms.proto2.RecordProto2.Int32Tensor parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(aialgorithms.proto2.RecordProto2.Int32Tensor prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code aialgorithms.proto2.Int32Tensor}
     *
     * <pre>
     * A sparse or dense rank-R tensor that stores data as 32-bit ints (int32).
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements aialgorithms.proto2.RecordProto2.Int32TensorOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return aialgorithms.proto2.RecordProto2.internal_static_aialgorithms_proto2_Int32Tensor_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return aialgorithms.proto2.RecordProto2.internal_static_aialgorithms_proto2_Int32Tensor_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                aialgorithms.proto2.RecordProto2.Int32Tensor.class, aialgorithms.proto2.RecordProto2.Int32Tensor.Builder.class);
      }

      // Construct using aialgorithms.proto2.RecordProto2.Int32Tensor.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        values_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        keys_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        shape_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return aialgorithms.proto2.RecordProto2.internal_static_aialgorithms_proto2_Int32Tensor_descriptor;
      }

      public aialgorithms.proto2.RecordProto2.Int32Tensor getDefaultInstanceForType() {
        return aialgorithms.proto2.RecordProto2.Int32Tensor.getDefaultInstance();
      }

      public aialgorithms.proto2.RecordProto2.Int32Tensor build() {
        aialgorithms.proto2.RecordProto2.Int32Tensor result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public aialgorithms.proto2.RecordProto2.Int32Tensor buildPartial() {
        aialgorithms.proto2.RecordProto2.Int32Tensor result = new aialgorithms.proto2.RecordProto2.Int32Tensor(this);
        int from_bitField0_ = bitField0_;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          values_ = java.util.Collections.unmodifiableList(values_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.values_ = values_;
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          keys_ = java.util.Collections.unmodifiableList(keys_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.keys_ = keys_;
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          shape_ = java.util.Collections.unmodifiableList(shape_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.shape_ = shape_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof aialgorithms.proto2.RecordProto2.Int32Tensor) {
          return mergeFrom((aialgorithms.proto2.RecordProto2.Int32Tensor)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(aialgorithms.proto2.RecordProto2.Int32Tensor other) {
        if (other == aialgorithms.proto2.RecordProto2.Int32Tensor.getDefaultInstance()) return this;
        if (!other.values_.isEmpty()) {
          if (values_.isEmpty()) {
            values_ = other.values_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureValuesIsMutable();
            values_.addAll(other.values_);
          }
          onChanged();
        }
        if (!other.keys_.isEmpty()) {
          if (keys_.isEmpty()) {
            keys_ = other.keys_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureKeysIsMutable();
            keys_.addAll(other.keys_);
          }
          onChanged();
        }
        if (!other.shape_.isEmpty()) {
          if (shape_.isEmpty()) {
            shape_ = other.shape_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureShapeIsMutable();
            shape_.addAll(other.shape_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        aialgorithms.proto2.RecordProto2.Int32Tensor parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (aialgorithms.proto2.RecordProto2.Int32Tensor) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // repeated int32 values = 1 [packed = true];
      private java.util.List<java.lang.Integer> values_ = java.util.Collections.emptyList();
      private void ensureValuesIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          values_ = new java.util.ArrayList<java.lang.Integer>(values_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <code>repeated int32 values = 1 [packed = true];</code>
       *
       * <pre>
       * Each value in the vector. If keys is empty this is treated as a
       * dense vector.
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getValuesList() {
        return java.util.Collections.unmodifiableList(values_);
      }
      /**
       * <code>repeated int32 values = 1 [packed = true];</code>
       *
       * <pre>
       * Each value in the vector. If keys is empty this is treated as a
       * dense vector.
       * </pre>
       */
      public int getValuesCount() {
        return values_.size();
      }
      /**
       * <code>repeated int32 values = 1 [packed = true];</code>
       *
       * <pre>
       * Each value in the vector. If keys is empty this is treated as a
       * dense vector.
       * </pre>
       */
      public int getValues(int index) {
        return values_.get(index);
      }
      /**
       * <code>repeated int32 values = 1 [packed = true];</code>
       *
       * <pre>
       * Each value in the vector. If keys is empty this is treated as a
       * dense vector.
       * </pre>
       */
      public Builder setValues(
          int index, int value) {
        ensureValuesIsMutable();
        values_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 values = 1 [packed = true];</code>
       *
       * <pre>
       * Each value in the vector. If keys is empty this is treated as a
       * dense vector.
       * </pre>
       */
      public Builder addValues(int value) {
        ensureValuesIsMutable();
        values_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 values = 1 [packed = true];</code>
       *
       * <pre>
       * Each value in the vector. If keys is empty this is treated as a
       * dense vector.
       * </pre>
       */
      public Builder addAllValues(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureValuesIsMutable();
        super.addAll(values, values_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 values = 1 [packed = true];</code>
       *
       * <pre>
       * Each value in the vector. If keys is empty this is treated as a
       * dense vector.
       * </pre>
       */
      public Builder clearValues() {
        values_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }

      // repeated uint64 keys = 2 [packed = true];
      private java.util.List<java.lang.Long> keys_ = java.util.Collections.emptyList();
      private void ensureKeysIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          keys_ = new java.util.ArrayList<java.lang.Long>(keys_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <code>repeated uint64 keys = 2 [packed = true];</code>
       *
       * <pre>
       * If not empty then the vector is treated as sparse with
       * each key specifying the location of the value in the sparse vector.
       * </pre>
       */
      public java.util.List<java.lang.Long>
          getKeysList() {
        return java.util.Collections.unmodifiableList(keys_);
      }
      /**
       * <code>repeated uint64 keys = 2 [packed = true];</code>
       *
       * <pre>
       * If not empty then the vector is treated as sparse with
       * each key specifying the location of the value in the sparse vector.
       * </pre>
       */
      public int getKeysCount() {
        return keys_.size();
      }
      /**
       * <code>repeated uint64 keys = 2 [packed = true];</code>
       *
       * <pre>
       * If not empty then the vector is treated as sparse with
       * each key specifying the location of the value in the sparse vector.
       * </pre>
       */
      public long getKeys(int index) {
        return keys_.get(index);
      }
      /**
       * <code>repeated uint64 keys = 2 [packed = true];</code>
       *
       * <pre>
       * If not empty then the vector is treated as sparse with
       * each key specifying the location of the value in the sparse vector.
       * </pre>
       */
      public Builder setKeys(
          int index, long value) {
        ensureKeysIsMutable();
        keys_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint64 keys = 2 [packed = true];</code>
       *
       * <pre>
       * If not empty then the vector is treated as sparse with
       * each key specifying the location of the value in the sparse vector.
       * </pre>
       */
      public Builder addKeys(long value) {
        ensureKeysIsMutable();
        keys_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint64 keys = 2 [packed = true];</code>
       *
       * <pre>
       * If not empty then the vector is treated as sparse with
       * each key specifying the location of the value in the sparse vector.
       * </pre>
       */
      public Builder addAllKeys(
          java.lang.Iterable<? extends java.lang.Long> values) {
        ensureKeysIsMutable();
        super.addAll(values, keys_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint64 keys = 2 [packed = true];</code>
       *
       * <pre>
       * If not empty then the vector is treated as sparse with
       * each key specifying the location of the value in the sparse vector.
       * </pre>
       */
      public Builder clearKeys() {
        keys_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      // repeated uint64 shape = 3 [packed = true];
      private java.util.List<java.lang.Long> shape_ = java.util.Collections.emptyList();
      private void ensureShapeIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          shape_ = new java.util.ArrayList<java.lang.Long>(shape_);
          bitField0_ |= 0x00000004;
         }
      }
      /**
       * <code>repeated uint64 shape = 3 [packed = true];</code>
       *
       * <pre>
       * Optional shape which will allow the vector to represent a matrix.
       * e.g. if shape = [ 10, 20 ] then floor(keys[i] / 10) will give the row
       * and keys[i] % 20 will give the column.
       * This also supports n-dimensonal tensors.
       * NB. this must be specified if the tensor is sparse.
       * </pre>
       */
      public java.util.List<java.lang.Long>
          getShapeList() {
        return java.util.Collections.unmodifiableList(shape_);
      }
      /**
       * <code>repeated uint64 shape = 3 [packed = true];</code>
       *
       * <pre>
       * Optional shape which will allow the vector to represent a matrix.
       * e.g. if shape = [ 10, 20 ] then floor(keys[i] / 10) will give the row
       * and keys[i] % 20 will give the column.
       * This also supports n-dimensonal tensors.
       * NB. this must be specified if the tensor is sparse.
       * </pre>
       */
      public int getShapeCount() {
        return shape_.size();
      }
      /**
       * <code>repeated uint64 shape = 3 [packed = true];</code>
       *
       * <pre>
       * Optional shape which will allow the vector to represent a matrix.
       * e.g. if shape = [ 10, 20 ] then floor(keys[i] / 10) will give the row
       * and keys[i] % 20 will give the column.
       * This also supports n-dimensonal tensors.
       * NB. this must be specified if the tensor is sparse.
       * </pre>
       */
      public long getShape(int index) {
        return shape_.get(index);
      }
      /**
       * <code>repeated uint64 shape = 3 [packed = true];</code>
       *
       * <pre>
       * Optional shape which will allow the vector to represent a matrix.
       * e.g. if shape = [ 10, 20 ] then floor(keys[i] / 10) will give the row
       * and keys[i] % 20 will give the column.
       * This also supports n-dimensonal tensors.
       * NB. this must be specified if the tensor is sparse.
       * </pre>
       */
      public Builder setShape(
          int index, long value) {
        ensureShapeIsMutable();
        shape_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint64 shape = 3 [packed = true];</code>
       *
       * <pre>
       * Optional shape which will allow the vector to represent a matrix.
       * e.g. if shape = [ 10, 20 ] then floor(keys[i] / 10) will give the row
       * and keys[i] % 20 will give the column.
       * This also supports n-dimensonal tensors.
       * NB. this must be specified if the tensor is sparse.
       * </pre>
       */
      public Builder addShape(long value) {
        ensureShapeIsMutable();
        shape_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint64 shape = 3 [packed = true];</code>
       *
       * <pre>
       * Optional shape which will allow the vector to represent a matrix.
       * e.g. if shape = [ 10, 20 ] then floor(keys[i] / 10) will give the row
       * and keys[i] % 20 will give the column.
       * This also supports n-dimensonal tensors.
       * NB. this must be specified if the tensor is sparse.
       * </pre>
       */
      public Builder addAllShape(
          java.lang.Iterable<? extends java.lang.Long> values) {
        ensureShapeIsMutable();
        super.addAll(values, shape_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint64 shape = 3 [packed = true];</code>
       *
       * <pre>
       * Optional shape which will allow the vector to represent a matrix.
       * e.g. if shape = [ 10, 20 ] then floor(keys[i] / 10) will give the row
       * and keys[i] % 20 will give the column.
       * This also supports n-dimensonal tensors.
       * NB. this must be specified if the tensor is sparse.
       * </pre>
       */
      public Builder clearShape() {
        shape_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:aialgorithms.proto2.Int32Tensor)
    }

    static {
      defaultInstance = new Int32Tensor(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:aialgorithms.proto2.Int32Tensor)
  }

  public interface BytesOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // repeated bytes value = 1;
    /**
     * <code>repeated bytes value = 1;</code>
     */
    java.util.List<com.google.protobuf.ByteString> getValueList();
    /**
     * <code>repeated bytes value = 1;</code>
     */
    int getValueCount();
    /**
     * <code>repeated bytes value = 1;</code>
     */
    com.google.protobuf.ByteString getValue(int index);

    // optional string content_type = 2;
    /**
     * <code>optional string content_type = 2;</code>
     *
     * <pre>
     * Stores the content type of the data if known.
     * This will allow the possibility of using decoders for common formats
     * in the future.
     * </pre>
     */
    boolean hasContentType();
    /**
     * <code>optional string content_type = 2;</code>
     *
     * <pre>
     * Stores the content type of the data if known.
     * This will allow the possibility of using decoders for common formats
     * in the future.
     * </pre>
     */
    java.lang.String getContentType();
    /**
     * <code>optional string content_type = 2;</code>
     *
     * <pre>
     * Stores the content type of the data if known.
     * This will allow the possibility of using decoders for common formats
     * in the future.
     * </pre>
     */
    com.google.protobuf.ByteString
        getContentTypeBytes();
  }
  /**
   * Protobuf type {@code aialgorithms.proto2.Bytes}
   *
   * <pre>
   * Support for storing binary data for parsing in other ways (such as JPEG/etc).
   * This is an example of another type of value and may not immediately be supported.
   * </pre>
   */
  public static final class Bytes extends
      com.google.protobuf.GeneratedMessage
      implements BytesOrBuilder {
    // Use Bytes.newBuilder() to construct.
    private Bytes(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Bytes(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Bytes defaultInstance;
    public static Bytes getDefaultInstance() {
      return defaultInstance;
    }

    public Bytes getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Bytes(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                value_ = new java.util.ArrayList<com.google.protobuf.ByteString>();
                mutable_bitField0_ |= 0x00000001;
              }
              value_.add(input.readBytes());
              break;
            }
            case 18: {
              bitField0_ |= 0x00000001;
              contentType_ = input.readBytes();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          value_ = java.util.Collections.unmodifiableList(value_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return aialgorithms.proto2.RecordProto2.internal_static_aialgorithms_proto2_Bytes_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return aialgorithms.proto2.RecordProto2.internal_static_aialgorithms_proto2_Bytes_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              aialgorithms.proto2.RecordProto2.Bytes.class, aialgorithms.proto2.RecordProto2.Bytes.Builder.class);
    }

    public static com.google.protobuf.Parser<Bytes> PARSER =
        new com.google.protobuf.AbstractParser<Bytes>() {
      public Bytes parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Bytes(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Bytes> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // repeated bytes value = 1;
    public static final int VALUE_FIELD_NUMBER = 1;
    private java.util.List<com.google.protobuf.ByteString> value_;
    /**
     * <code>repeated bytes value = 1;</code>
     */
    public java.util.List<com.google.protobuf.ByteString>
        getValueList() {
      return value_;
    }
    /**
     * <code>repeated bytes value = 1;</code>
     */
    public int getValueCount() {
      return value_.size();
    }
    /**
     * <code>repeated bytes value = 1;</code>
     */
    public com.google.protobuf.ByteString getValue(int index) {
      return value_.get(index);
    }

    // optional string content_type = 2;
    public static final int CONTENT_TYPE_FIELD_NUMBER = 2;
    private java.lang.Object contentType_;
    /**
     * <code>optional string content_type = 2;</code>
     *
     * <pre>
     * Stores the content type of the data if known.
     * This will allow the possibility of using decoders for common formats
     * in the future.
     * </pre>
     */
    public boolean hasContentType() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional string content_type = 2;</code>
     *
     * <pre>
     * Stores the content type of the data if known.
     * This will allow the possibility of using decoders for common formats
     * in the future.
     * </pre>
     */
    public java.lang.String getContentType() {
      java.lang.Object ref = contentType_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          contentType_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string content_type = 2;</code>
     *
     * <pre>
     * Stores the content type of the data if known.
     * This will allow the possibility of using decoders for common formats
     * in the future.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getContentTypeBytes() {
      java.lang.Object ref = contentType_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        contentType_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private void initFields() {
      value_ = java.util.Collections.emptyList();
      contentType_ = "";
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < value_.size(); i++) {
        output.writeBytes(1, value_.get(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(2, getContentTypeBytes());
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < value_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeBytesSizeNoTag(value_.get(i));
        }
        size += dataSize;
        size += 1 * getValueList().size();
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, getContentTypeBytes());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static aialgorithms.proto2.RecordProto2.Bytes parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static aialgorithms.proto2.RecordProto2.Bytes parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static aialgorithms.proto2.RecordProto2.Bytes parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static aialgorithms.proto2.RecordProto2.Bytes parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static aialgorithms.proto2.RecordProto2.Bytes parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static aialgorithms.proto2.RecordProto2.Bytes parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static aialgorithms.proto2.RecordProto2.Bytes parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static aialgorithms.proto2.RecordProto2.Bytes parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static aialgorithms.proto2.RecordProto2.Bytes parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static aialgorithms.proto2.RecordProto2.Bytes parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(aialgorithms.proto2.RecordProto2.Bytes prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code aialgorithms.proto2.Bytes}
     *
     * <pre>
     * Support for storing binary data for parsing in other ways (such as JPEG/etc).
     * This is an example of another type of value and may not immediately be supported.
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements aialgorithms.proto2.RecordProto2.BytesOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return aialgorithms.proto2.RecordProto2.internal_static_aialgorithms_proto2_Bytes_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return aialgorithms.proto2.RecordProto2.internal_static_aialgorithms_proto2_Bytes_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                aialgorithms.proto2.RecordProto2.Bytes.class, aialgorithms.proto2.RecordProto2.Bytes.Builder.class);
      }

      // Construct using aialgorithms.proto2.RecordProto2.Bytes.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        value_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        contentType_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return aialgorithms.proto2.RecordProto2.internal_static_aialgorithms_proto2_Bytes_descriptor;
      }

      public aialgorithms.proto2.RecordProto2.Bytes getDefaultInstanceForType() {
        return aialgorithms.proto2.RecordProto2.Bytes.getDefaultInstance();
      }

      public aialgorithms.proto2.RecordProto2.Bytes build() {
        aialgorithms.proto2.RecordProto2.Bytes result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public aialgorithms.proto2.RecordProto2.Bytes buildPartial() {
        aialgorithms.proto2.RecordProto2.Bytes result = new aialgorithms.proto2.RecordProto2.Bytes(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          value_ = java.util.Collections.unmodifiableList(value_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.value_ = value_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000001;
        }
        result.contentType_ = contentType_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof aialgorithms.proto2.RecordProto2.Bytes) {
          return mergeFrom((aialgorithms.proto2.RecordProto2.Bytes)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(aialgorithms.proto2.RecordProto2.Bytes other) {
        if (other == aialgorithms.proto2.RecordProto2.Bytes.getDefaultInstance()) return this;
        if (!other.value_.isEmpty()) {
          if (value_.isEmpty()) {
            value_ = other.value_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureValueIsMutable();
            value_.addAll(other.value_);
          }
          onChanged();
        }
        if (other.hasContentType()) {
          bitField0_ |= 0x00000002;
          contentType_ = other.contentType_;
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        aialgorithms.proto2.RecordProto2.Bytes parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (aialgorithms.proto2.RecordProto2.Bytes) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // repeated bytes value = 1;
      private java.util.List<com.google.protobuf.ByteString> value_ = java.util.Collections.emptyList();
      private void ensureValueIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          value_ = new java.util.ArrayList<com.google.protobuf.ByteString>(value_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <code>repeated bytes value = 1;</code>
       */
      public java.util.List<com.google.protobuf.ByteString>
          getValueList() {
        return java.util.Collections.unmodifiableList(value_);
      }
      /**
       * <code>repeated bytes value = 1;</code>
       */
      public int getValueCount() {
        return value_.size();
      }
      /**
       * <code>repeated bytes value = 1;</code>
       */
      public com.google.protobuf.ByteString getValue(int index) {
        return value_.get(index);
      }
      /**
       * <code>repeated bytes value = 1;</code>
       */
      public Builder setValue(
          int index, com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureValueIsMutable();
        value_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bytes value = 1;</code>
       */
      public Builder addValue(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureValueIsMutable();
        value_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bytes value = 1;</code>
       */
      public Builder addAllValue(
          java.lang.Iterable<? extends com.google.protobuf.ByteString> values) {
        ensureValueIsMutable();
        super.addAll(values, value_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bytes value = 1;</code>
       */
      public Builder clearValue() {
        value_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }

      // optional string content_type = 2;
      private java.lang.Object contentType_ = "";
      /**
       * <code>optional string content_type = 2;</code>
       *
       * <pre>
       * Stores the content type of the data if known.
       * This will allow the possibility of using decoders for common formats
       * in the future.
       * </pre>
       */
      public boolean hasContentType() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional string content_type = 2;</code>
       *
       * <pre>
       * Stores the content type of the data if known.
       * This will allow the possibility of using decoders for common formats
       * in the future.
       * </pre>
       */
      public java.lang.String getContentType() {
        java.lang.Object ref = contentType_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          contentType_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string content_type = 2;</code>
       *
       * <pre>
       * Stores the content type of the data if known.
       * This will allow the possibility of using decoders for common formats
       * in the future.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getContentTypeBytes() {
        java.lang.Object ref = contentType_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          contentType_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string content_type = 2;</code>
       *
       * <pre>
       * Stores the content type of the data if known.
       * This will allow the possibility of using decoders for common formats
       * in the future.
       * </pre>
       */
      public Builder setContentType(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        contentType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string content_type = 2;</code>
       *
       * <pre>
       * Stores the content type of the data if known.
       * This will allow the possibility of using decoders for common formats
       * in the future.
       * </pre>
       */
      public Builder clearContentType() {
        bitField0_ = (bitField0_ & ~0x00000002);
        contentType_ = getDefaultInstance().getContentType();
        onChanged();
        return this;
      }
      /**
       * <code>optional string content_type = 2;</code>
       *
       * <pre>
       * Stores the content type of the data if known.
       * This will allow the possibility of using decoders for common formats
       * in the future.
       * </pre>
       */
      public Builder setContentTypeBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        contentType_ = value;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:aialgorithms.proto2.Bytes)
    }

    static {
      defaultInstance = new Bytes(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:aialgorithms.proto2.Bytes)
  }

  public interface ValueOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional .aialgorithms.proto2.Float32Tensor float32_tensor = 2;
    /**
     * <code>optional .aialgorithms.proto2.Float32Tensor float32_tensor = 2;</code>
     */
    boolean hasFloat32Tensor();
    /**
     * <code>optional .aialgorithms.proto2.Float32Tensor float32_tensor = 2;</code>
     */
    aialgorithms.proto2.RecordProto2.Float32Tensor getFloat32Tensor();
    /**
     * <code>optional .aialgorithms.proto2.Float32Tensor float32_tensor = 2;</code>
     */
    aialgorithms.proto2.RecordProto2.Float32TensorOrBuilder getFloat32TensorOrBuilder();

    // optional .aialgorithms.proto2.Float64Tensor float64_tensor = 3;
    /**
     * <code>optional .aialgorithms.proto2.Float64Tensor float64_tensor = 3;</code>
     */
    boolean hasFloat64Tensor();
    /**
     * <code>optional .aialgorithms.proto2.Float64Tensor float64_tensor = 3;</code>
     */
    aialgorithms.proto2.RecordProto2.Float64Tensor getFloat64Tensor();
    /**
     * <code>optional .aialgorithms.proto2.Float64Tensor float64_tensor = 3;</code>
     */
    aialgorithms.proto2.RecordProto2.Float64TensorOrBuilder getFloat64TensorOrBuilder();

    // optional .aialgorithms.proto2.Int32Tensor int32_tensor = 7;
    /**
     * <code>optional .aialgorithms.proto2.Int32Tensor int32_tensor = 7;</code>
     */
    boolean hasInt32Tensor();
    /**
     * <code>optional .aialgorithms.proto2.Int32Tensor int32_tensor = 7;</code>
     */
    aialgorithms.proto2.RecordProto2.Int32Tensor getInt32Tensor();
    /**
     * <code>optional .aialgorithms.proto2.Int32Tensor int32_tensor = 7;</code>
     */
    aialgorithms.proto2.RecordProto2.Int32TensorOrBuilder getInt32TensorOrBuilder();

    // optional .aialgorithms.proto2.Bytes bytes = 9;
    /**
     * <code>optional .aialgorithms.proto2.Bytes bytes = 9;</code>
     */
    boolean hasBytes();
    /**
     * <code>optional .aialgorithms.proto2.Bytes bytes = 9;</code>
     */
    aialgorithms.proto2.RecordProto2.Bytes getBytes();
    /**
     * <code>optional .aialgorithms.proto2.Bytes bytes = 9;</code>
     */
    aialgorithms.proto2.RecordProto2.BytesOrBuilder getBytesOrBuilder();
  }
  /**
   * Protobuf type {@code aialgorithms.proto2.Value}
   */
  public static final class Value extends
      com.google.protobuf.GeneratedMessage
      implements ValueOrBuilder {
    // Use Value.newBuilder() to construct.
    private Value(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Value(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Value defaultInstance;
    public static Value getDefaultInstance() {
      return defaultInstance;
    }

    public Value getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Value(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 18: {
              aialgorithms.proto2.RecordProto2.Float32Tensor.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = float32Tensor_.toBuilder();
              }
              float32Tensor_ = input.readMessage(aialgorithms.proto2.RecordProto2.Float32Tensor.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(float32Tensor_);
                float32Tensor_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 26: {
              aialgorithms.proto2.RecordProto2.Float64Tensor.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = float64Tensor_.toBuilder();
              }
              float64Tensor_ = input.readMessage(aialgorithms.proto2.RecordProto2.Float64Tensor.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(float64Tensor_);
                float64Tensor_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
            case 58: {
              aialgorithms.proto2.RecordProto2.Int32Tensor.Builder subBuilder = null;
              if (((bitField0_ & 0x00000004) == 0x00000004)) {
                subBuilder = int32Tensor_.toBuilder();
              }
              int32Tensor_ = input.readMessage(aialgorithms.proto2.RecordProto2.Int32Tensor.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(int32Tensor_);
                int32Tensor_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000004;
              break;
            }
            case 74: {
              aialgorithms.proto2.RecordProto2.Bytes.Builder subBuilder = null;
              if (((bitField0_ & 0x00000008) == 0x00000008)) {
                subBuilder = bytes_.toBuilder();
              }
              bytes_ = input.readMessage(aialgorithms.proto2.RecordProto2.Bytes.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(bytes_);
                bytes_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000008;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return aialgorithms.proto2.RecordProto2.internal_static_aialgorithms_proto2_Value_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return aialgorithms.proto2.RecordProto2.internal_static_aialgorithms_proto2_Value_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              aialgorithms.proto2.RecordProto2.Value.class, aialgorithms.proto2.RecordProto2.Value.Builder.class);
    }

    public static com.google.protobuf.Parser<Value> PARSER =
        new com.google.protobuf.AbstractParser<Value>() {
      public Value parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Value(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Value> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional .aialgorithms.proto2.Float32Tensor float32_tensor = 2;
    public static final int FLOAT32_TENSOR_FIELD_NUMBER = 2;
    private aialgorithms.proto2.RecordProto2.Float32Tensor float32Tensor_;
    /**
     * <code>optional .aialgorithms.proto2.Float32Tensor float32_tensor = 2;</code>
     */
    public boolean hasFloat32Tensor() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .aialgorithms.proto2.Float32Tensor float32_tensor = 2;</code>
     */
    public aialgorithms.proto2.RecordProto2.Float32Tensor getFloat32Tensor() {
      return float32Tensor_;
    }
    /**
     * <code>optional .aialgorithms.proto2.Float32Tensor float32_tensor = 2;</code>
     */
    public aialgorithms.proto2.RecordProto2.Float32TensorOrBuilder getFloat32TensorOrBuilder() {
      return float32Tensor_;
    }

    // optional .aialgorithms.proto2.Float64Tensor float64_tensor = 3;
    public static final int FLOAT64_TENSOR_FIELD_NUMBER = 3;
    private aialgorithms.proto2.RecordProto2.Float64Tensor float64Tensor_;
    /**
     * <code>optional .aialgorithms.proto2.Float64Tensor float64_tensor = 3;</code>
     */
    public boolean hasFloat64Tensor() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional .aialgorithms.proto2.Float64Tensor float64_tensor = 3;</code>
     */
    public aialgorithms.proto2.RecordProto2.Float64Tensor getFloat64Tensor() {
      return float64Tensor_;
    }
    /**
     * <code>optional .aialgorithms.proto2.Float64Tensor float64_tensor = 3;</code>
     */
    public aialgorithms.proto2.RecordProto2.Float64TensorOrBuilder getFloat64TensorOrBuilder() {
      return float64Tensor_;
    }

    // optional .aialgorithms.proto2.Int32Tensor int32_tensor = 7;
    public static final int INT32_TENSOR_FIELD_NUMBER = 7;
    private aialgorithms.proto2.RecordProto2.Int32Tensor int32Tensor_;
    /**
     * <code>optional .aialgorithms.proto2.Int32Tensor int32_tensor = 7;</code>
     */
    public boolean hasInt32Tensor() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional .aialgorithms.proto2.Int32Tensor int32_tensor = 7;</code>
     */
    public aialgorithms.proto2.RecordProto2.Int32Tensor getInt32Tensor() {
      return int32Tensor_;
    }
    /**
     * <code>optional .aialgorithms.proto2.Int32Tensor int32_tensor = 7;</code>
     */
    public aialgorithms.proto2.RecordProto2.Int32TensorOrBuilder getInt32TensorOrBuilder() {
      return int32Tensor_;
    }

    // optional .aialgorithms.proto2.Bytes bytes = 9;
    public static final int BYTES_FIELD_NUMBER = 9;
    private aialgorithms.proto2.RecordProto2.Bytes bytes_;
    /**
     * <code>optional .aialgorithms.proto2.Bytes bytes = 9;</code>
     */
    public boolean hasBytes() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional .aialgorithms.proto2.Bytes bytes = 9;</code>
     */
    public aialgorithms.proto2.RecordProto2.Bytes getBytes() {
      return bytes_;
    }
    /**
     * <code>optional .aialgorithms.proto2.Bytes bytes = 9;</code>
     */
    public aialgorithms.proto2.RecordProto2.BytesOrBuilder getBytesOrBuilder() {
      return bytes_;
    }

    private void initFields() {
      float32Tensor_ = aialgorithms.proto2.RecordProto2.Float32Tensor.getDefaultInstance();
      float64Tensor_ = aialgorithms.proto2.RecordProto2.Float64Tensor.getDefaultInstance();
      int32Tensor_ = aialgorithms.proto2.RecordProto2.Int32Tensor.getDefaultInstance();
      bytes_ = aialgorithms.proto2.RecordProto2.Bytes.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(2, float32Tensor_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(3, float64Tensor_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(7, int32Tensor_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeMessage(9, bytes_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, float32Tensor_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, float64Tensor_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, int32Tensor_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(9, bytes_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static aialgorithms.proto2.RecordProto2.Value parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static aialgorithms.proto2.RecordProto2.Value parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static aialgorithms.proto2.RecordProto2.Value parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static aialgorithms.proto2.RecordProto2.Value parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static aialgorithms.proto2.RecordProto2.Value parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static aialgorithms.proto2.RecordProto2.Value parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static aialgorithms.proto2.RecordProto2.Value parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static aialgorithms.proto2.RecordProto2.Value parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static aialgorithms.proto2.RecordProto2.Value parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static aialgorithms.proto2.RecordProto2.Value parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(aialgorithms.proto2.RecordProto2.Value prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code aialgorithms.proto2.Value}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements aialgorithms.proto2.RecordProto2.ValueOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return aialgorithms.proto2.RecordProto2.internal_static_aialgorithms_proto2_Value_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return aialgorithms.proto2.RecordProto2.internal_static_aialgorithms_proto2_Value_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                aialgorithms.proto2.RecordProto2.Value.class, aialgorithms.proto2.RecordProto2.Value.Builder.class);
      }

      // Construct using aialgorithms.proto2.RecordProto2.Value.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getFloat32TensorFieldBuilder();
          getFloat64TensorFieldBuilder();
          getInt32TensorFieldBuilder();
          getBytesFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (float32TensorBuilder_ == null) {
          float32Tensor_ = aialgorithms.proto2.RecordProto2.Float32Tensor.getDefaultInstance();
        } else {
          float32TensorBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        if (float64TensorBuilder_ == null) {
          float64Tensor_ = aialgorithms.proto2.RecordProto2.Float64Tensor.getDefaultInstance();
        } else {
          float64TensorBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        if (int32TensorBuilder_ == null) {
          int32Tensor_ = aialgorithms.proto2.RecordProto2.Int32Tensor.getDefaultInstance();
        } else {
          int32TensorBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        if (bytesBuilder_ == null) {
          bytes_ = aialgorithms.proto2.RecordProto2.Bytes.getDefaultInstance();
        } else {
          bytesBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return aialgorithms.proto2.RecordProto2.internal_static_aialgorithms_proto2_Value_descriptor;
      }

      public aialgorithms.proto2.RecordProto2.Value getDefaultInstanceForType() {
        return aialgorithms.proto2.RecordProto2.Value.getDefaultInstance();
      }

      public aialgorithms.proto2.RecordProto2.Value build() {
        aialgorithms.proto2.RecordProto2.Value result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public aialgorithms.proto2.RecordProto2.Value buildPartial() {
        aialgorithms.proto2.RecordProto2.Value result = new aialgorithms.proto2.RecordProto2.Value(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (float32TensorBuilder_ == null) {
          result.float32Tensor_ = float32Tensor_;
        } else {
          result.float32Tensor_ = float32TensorBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        if (float64TensorBuilder_ == null) {
          result.float64Tensor_ = float64Tensor_;
        } else {
          result.float64Tensor_ = float64TensorBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        if (int32TensorBuilder_ == null) {
          result.int32Tensor_ = int32Tensor_;
        } else {
          result.int32Tensor_ = int32TensorBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        if (bytesBuilder_ == null) {
          result.bytes_ = bytes_;
        } else {
          result.bytes_ = bytesBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof aialgorithms.proto2.RecordProto2.Value) {
          return mergeFrom((aialgorithms.proto2.RecordProto2.Value)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(aialgorithms.proto2.RecordProto2.Value other) {
        if (other == aialgorithms.proto2.RecordProto2.Value.getDefaultInstance()) return this;
        if (other.hasFloat32Tensor()) {
          mergeFloat32Tensor(other.getFloat32Tensor());
        }
        if (other.hasFloat64Tensor()) {
          mergeFloat64Tensor(other.getFloat64Tensor());
        }
        if (other.hasInt32Tensor()) {
          mergeInt32Tensor(other.getInt32Tensor());
        }
        if (other.hasBytes()) {
          mergeBytes(other.getBytes());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        aialgorithms.proto2.RecordProto2.Value parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (aialgorithms.proto2.RecordProto2.Value) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional .aialgorithms.proto2.Float32Tensor float32_tensor = 2;
      private aialgorithms.proto2.RecordProto2.Float32Tensor float32Tensor_ = aialgorithms.proto2.RecordProto2.Float32Tensor.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          aialgorithms.proto2.RecordProto2.Float32Tensor, aialgorithms.proto2.RecordProto2.Float32Tensor.Builder, aialgorithms.proto2.RecordProto2.Float32TensorOrBuilder> float32TensorBuilder_;
      /**
       * <code>optional .aialgorithms.proto2.Float32Tensor float32_tensor = 2;</code>
       */
      public boolean hasFloat32Tensor() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .aialgorithms.proto2.Float32Tensor float32_tensor = 2;</code>
       */
      public aialgorithms.proto2.RecordProto2.Float32Tensor getFloat32Tensor() {
        if (float32TensorBuilder_ == null) {
          return float32Tensor_;
        } else {
          return float32TensorBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .aialgorithms.proto2.Float32Tensor float32_tensor = 2;</code>
       */
      public Builder setFloat32Tensor(aialgorithms.proto2.RecordProto2.Float32Tensor value) {
        if (float32TensorBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          float32Tensor_ = value;
          onChanged();
        } else {
          float32TensorBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .aialgorithms.proto2.Float32Tensor float32_tensor = 2;</code>
       */
      public Builder setFloat32Tensor(
          aialgorithms.proto2.RecordProto2.Float32Tensor.Builder builderForValue) {
        if (float32TensorBuilder_ == null) {
          float32Tensor_ = builderForValue.build();
          onChanged();
        } else {
          float32TensorBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .aialgorithms.proto2.Float32Tensor float32_tensor = 2;</code>
       */
      public Builder mergeFloat32Tensor(aialgorithms.proto2.RecordProto2.Float32Tensor value) {
        if (float32TensorBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              float32Tensor_ != aialgorithms.proto2.RecordProto2.Float32Tensor.getDefaultInstance()) {
            float32Tensor_ =
              aialgorithms.proto2.RecordProto2.Float32Tensor.newBuilder(float32Tensor_).mergeFrom(value).buildPartial();
          } else {
            float32Tensor_ = value;
          }
          onChanged();
        } else {
          float32TensorBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .aialgorithms.proto2.Float32Tensor float32_tensor = 2;</code>
       */
      public Builder clearFloat32Tensor() {
        if (float32TensorBuilder_ == null) {
          float32Tensor_ = aialgorithms.proto2.RecordProto2.Float32Tensor.getDefaultInstance();
          onChanged();
        } else {
          float32TensorBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>optional .aialgorithms.proto2.Float32Tensor float32_tensor = 2;</code>
       */
      public aialgorithms.proto2.RecordProto2.Float32Tensor.Builder getFloat32TensorBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getFloat32TensorFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .aialgorithms.proto2.Float32Tensor float32_tensor = 2;</code>
       */
      public aialgorithms.proto2.RecordProto2.Float32TensorOrBuilder getFloat32TensorOrBuilder() {
        if (float32TensorBuilder_ != null) {
          return float32TensorBuilder_.getMessageOrBuilder();
        } else {
          return float32Tensor_;
        }
      }
      /**
       * <code>optional .aialgorithms.proto2.Float32Tensor float32_tensor = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          aialgorithms.proto2.RecordProto2.Float32Tensor, aialgorithms.proto2.RecordProto2.Float32Tensor.Builder, aialgorithms.proto2.RecordProto2.Float32TensorOrBuilder> 
          getFloat32TensorFieldBuilder() {
        if (float32TensorBuilder_ == null) {
          float32TensorBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              aialgorithms.proto2.RecordProto2.Float32Tensor, aialgorithms.proto2.RecordProto2.Float32Tensor.Builder, aialgorithms.proto2.RecordProto2.Float32TensorOrBuilder>(
                  float32Tensor_,
                  getParentForChildren(),
                  isClean());
          float32Tensor_ = null;
        }
        return float32TensorBuilder_;
      }

      // optional .aialgorithms.proto2.Float64Tensor float64_tensor = 3;
      private aialgorithms.proto2.RecordProto2.Float64Tensor float64Tensor_ = aialgorithms.proto2.RecordProto2.Float64Tensor.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          aialgorithms.proto2.RecordProto2.Float64Tensor, aialgorithms.proto2.RecordProto2.Float64Tensor.Builder, aialgorithms.proto2.RecordProto2.Float64TensorOrBuilder> float64TensorBuilder_;
      /**
       * <code>optional .aialgorithms.proto2.Float64Tensor float64_tensor = 3;</code>
       */
      public boolean hasFloat64Tensor() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .aialgorithms.proto2.Float64Tensor float64_tensor = 3;</code>
       */
      public aialgorithms.proto2.RecordProto2.Float64Tensor getFloat64Tensor() {
        if (float64TensorBuilder_ == null) {
          return float64Tensor_;
        } else {
          return float64TensorBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .aialgorithms.proto2.Float64Tensor float64_tensor = 3;</code>
       */
      public Builder setFloat64Tensor(aialgorithms.proto2.RecordProto2.Float64Tensor value) {
        if (float64TensorBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          float64Tensor_ = value;
          onChanged();
        } else {
          float64TensorBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .aialgorithms.proto2.Float64Tensor float64_tensor = 3;</code>
       */
      public Builder setFloat64Tensor(
          aialgorithms.proto2.RecordProto2.Float64Tensor.Builder builderForValue) {
        if (float64TensorBuilder_ == null) {
          float64Tensor_ = builderForValue.build();
          onChanged();
        } else {
          float64TensorBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .aialgorithms.proto2.Float64Tensor float64_tensor = 3;</code>
       */
      public Builder mergeFloat64Tensor(aialgorithms.proto2.RecordProto2.Float64Tensor value) {
        if (float64TensorBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              float64Tensor_ != aialgorithms.proto2.RecordProto2.Float64Tensor.getDefaultInstance()) {
            float64Tensor_ =
              aialgorithms.proto2.RecordProto2.Float64Tensor.newBuilder(float64Tensor_).mergeFrom(value).buildPartial();
          } else {
            float64Tensor_ = value;
          }
          onChanged();
        } else {
          float64TensorBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .aialgorithms.proto2.Float64Tensor float64_tensor = 3;</code>
       */
      public Builder clearFloat64Tensor() {
        if (float64TensorBuilder_ == null) {
          float64Tensor_ = aialgorithms.proto2.RecordProto2.Float64Tensor.getDefaultInstance();
          onChanged();
        } else {
          float64TensorBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      /**
       * <code>optional .aialgorithms.proto2.Float64Tensor float64_tensor = 3;</code>
       */
      public aialgorithms.proto2.RecordProto2.Float64Tensor.Builder getFloat64TensorBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getFloat64TensorFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .aialgorithms.proto2.Float64Tensor float64_tensor = 3;</code>
       */
      public aialgorithms.proto2.RecordProto2.Float64TensorOrBuilder getFloat64TensorOrBuilder() {
        if (float64TensorBuilder_ != null) {
          return float64TensorBuilder_.getMessageOrBuilder();
        } else {
          return float64Tensor_;
        }
      }
      /**
       * <code>optional .aialgorithms.proto2.Float64Tensor float64_tensor = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          aialgorithms.proto2.RecordProto2.Float64Tensor, aialgorithms.proto2.RecordProto2.Float64Tensor.Builder, aialgorithms.proto2.RecordProto2.Float64TensorOrBuilder> 
          getFloat64TensorFieldBuilder() {
        if (float64TensorBuilder_ == null) {
          float64TensorBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              aialgorithms.proto2.RecordProto2.Float64Tensor, aialgorithms.proto2.RecordProto2.Float64Tensor.Builder, aialgorithms.proto2.RecordProto2.Float64TensorOrBuilder>(
                  float64Tensor_,
                  getParentForChildren(),
                  isClean());
          float64Tensor_ = null;
        }
        return float64TensorBuilder_;
      }

      // optional .aialgorithms.proto2.Int32Tensor int32_tensor = 7;
      private aialgorithms.proto2.RecordProto2.Int32Tensor int32Tensor_ = aialgorithms.proto2.RecordProto2.Int32Tensor.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          aialgorithms.proto2.RecordProto2.Int32Tensor, aialgorithms.proto2.RecordProto2.Int32Tensor.Builder, aialgorithms.proto2.RecordProto2.Int32TensorOrBuilder> int32TensorBuilder_;
      /**
       * <code>optional .aialgorithms.proto2.Int32Tensor int32_tensor = 7;</code>
       */
      public boolean hasInt32Tensor() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional .aialgorithms.proto2.Int32Tensor int32_tensor = 7;</code>
       */
      public aialgorithms.proto2.RecordProto2.Int32Tensor getInt32Tensor() {
        if (int32TensorBuilder_ == null) {
          return int32Tensor_;
        } else {
          return int32TensorBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .aialgorithms.proto2.Int32Tensor int32_tensor = 7;</code>
       */
      public Builder setInt32Tensor(aialgorithms.proto2.RecordProto2.Int32Tensor value) {
        if (int32TensorBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          int32Tensor_ = value;
          onChanged();
        } else {
          int32TensorBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .aialgorithms.proto2.Int32Tensor int32_tensor = 7;</code>
       */
      public Builder setInt32Tensor(
          aialgorithms.proto2.RecordProto2.Int32Tensor.Builder builderForValue) {
        if (int32TensorBuilder_ == null) {
          int32Tensor_ = builderForValue.build();
          onChanged();
        } else {
          int32TensorBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .aialgorithms.proto2.Int32Tensor int32_tensor = 7;</code>
       */
      public Builder mergeInt32Tensor(aialgorithms.proto2.RecordProto2.Int32Tensor value) {
        if (int32TensorBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004) &&
              int32Tensor_ != aialgorithms.proto2.RecordProto2.Int32Tensor.getDefaultInstance()) {
            int32Tensor_ =
              aialgorithms.proto2.RecordProto2.Int32Tensor.newBuilder(int32Tensor_).mergeFrom(value).buildPartial();
          } else {
            int32Tensor_ = value;
          }
          onChanged();
        } else {
          int32TensorBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .aialgorithms.proto2.Int32Tensor int32_tensor = 7;</code>
       */
      public Builder clearInt32Tensor() {
        if (int32TensorBuilder_ == null) {
          int32Tensor_ = aialgorithms.proto2.RecordProto2.Int32Tensor.getDefaultInstance();
          onChanged();
        } else {
          int32TensorBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }
      /**
       * <code>optional .aialgorithms.proto2.Int32Tensor int32_tensor = 7;</code>
       */
      public aialgorithms.proto2.RecordProto2.Int32Tensor.Builder getInt32TensorBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getInt32TensorFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .aialgorithms.proto2.Int32Tensor int32_tensor = 7;</code>
       */
      public aialgorithms.proto2.RecordProto2.Int32TensorOrBuilder getInt32TensorOrBuilder() {
        if (int32TensorBuilder_ != null) {
          return int32TensorBuilder_.getMessageOrBuilder();
        } else {
          return int32Tensor_;
        }
      }
      /**
       * <code>optional .aialgorithms.proto2.Int32Tensor int32_tensor = 7;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          aialgorithms.proto2.RecordProto2.Int32Tensor, aialgorithms.proto2.RecordProto2.Int32Tensor.Builder, aialgorithms.proto2.RecordProto2.Int32TensorOrBuilder> 
          getInt32TensorFieldBuilder() {
        if (int32TensorBuilder_ == null) {
          int32TensorBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              aialgorithms.proto2.RecordProto2.Int32Tensor, aialgorithms.proto2.RecordProto2.Int32Tensor.Builder, aialgorithms.proto2.RecordProto2.Int32TensorOrBuilder>(
                  int32Tensor_,
                  getParentForChildren(),
                  isClean());
          int32Tensor_ = null;
        }
        return int32TensorBuilder_;
      }

      // optional .aialgorithms.proto2.Bytes bytes = 9;
      private aialgorithms.proto2.RecordProto2.Bytes bytes_ = aialgorithms.proto2.RecordProto2.Bytes.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          aialgorithms.proto2.RecordProto2.Bytes, aialgorithms.proto2.RecordProto2.Bytes.Builder, aialgorithms.proto2.RecordProto2.BytesOrBuilder> bytesBuilder_;
      /**
       * <code>optional .aialgorithms.proto2.Bytes bytes = 9;</code>
       */
      public boolean hasBytes() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional .aialgorithms.proto2.Bytes bytes = 9;</code>
       */
      public aialgorithms.proto2.RecordProto2.Bytes getBytes() {
        if (bytesBuilder_ == null) {
          return bytes_;
        } else {
          return bytesBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .aialgorithms.proto2.Bytes bytes = 9;</code>
       */
      public Builder setBytes(aialgorithms.proto2.RecordProto2.Bytes value) {
        if (bytesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          bytes_ = value;
          onChanged();
        } else {
          bytesBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .aialgorithms.proto2.Bytes bytes = 9;</code>
       */
      public Builder setBytes(
          aialgorithms.proto2.RecordProto2.Bytes.Builder builderForValue) {
        if (bytesBuilder_ == null) {
          bytes_ = builderForValue.build();
          onChanged();
        } else {
          bytesBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .aialgorithms.proto2.Bytes bytes = 9;</code>
       */
      public Builder mergeBytes(aialgorithms.proto2.RecordProto2.Bytes value) {
        if (bytesBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008) &&
              bytes_ != aialgorithms.proto2.RecordProto2.Bytes.getDefaultInstance()) {
            bytes_ =
              aialgorithms.proto2.RecordProto2.Bytes.newBuilder(bytes_).mergeFrom(value).buildPartial();
          } else {
            bytes_ = value;
          }
          onChanged();
        } else {
          bytesBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .aialgorithms.proto2.Bytes bytes = 9;</code>
       */
      public Builder clearBytes() {
        if (bytesBuilder_ == null) {
          bytes_ = aialgorithms.proto2.RecordProto2.Bytes.getDefaultInstance();
          onChanged();
        } else {
          bytesBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }
      /**
       * <code>optional .aialgorithms.proto2.Bytes bytes = 9;</code>
       */
      public aialgorithms.proto2.RecordProto2.Bytes.Builder getBytesBuilder() {
        bitField0_ |= 0x00000008;
        onChanged();
        return getBytesFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .aialgorithms.proto2.Bytes bytes = 9;</code>
       */
      public aialgorithms.proto2.RecordProto2.BytesOrBuilder getBytesOrBuilder() {
        if (bytesBuilder_ != null) {
          return bytesBuilder_.getMessageOrBuilder();
        } else {
          return bytes_;
        }
      }
      /**
       * <code>optional .aialgorithms.proto2.Bytes bytes = 9;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          aialgorithms.proto2.RecordProto2.Bytes, aialgorithms.proto2.RecordProto2.Bytes.Builder, aialgorithms.proto2.RecordProto2.BytesOrBuilder> 
          getBytesFieldBuilder() {
        if (bytesBuilder_ == null) {
          bytesBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              aialgorithms.proto2.RecordProto2.Bytes, aialgorithms.proto2.RecordProto2.Bytes.Builder, aialgorithms.proto2.RecordProto2.BytesOrBuilder>(
                  bytes_,
                  getParentForChildren(),
                  isClean());
          bytes_ = null;
        }
        return bytesBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:aialgorithms.proto2.Value)
    }

    static {
      defaultInstance = new Value(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:aialgorithms.proto2.Value)
  }

  public interface MapEntryOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional string key = 1;
    /**
     * <code>optional string key = 1;</code>
     */
    boolean hasKey();
    /**
     * <code>optional string key = 1;</code>
     */
    java.lang.String getKey();
    /**
     * <code>optional string key = 1;</code>
     */
    com.google.protobuf.ByteString
        getKeyBytes();

    // optional .aialgorithms.proto2.Value value = 2;
    /**
     * <code>optional .aialgorithms.proto2.Value value = 2;</code>
     */
    boolean hasValue();
    /**
     * <code>optional .aialgorithms.proto2.Value value = 2;</code>
     */
    aialgorithms.proto2.RecordProto2.Value getValue();
    /**
     * <code>optional .aialgorithms.proto2.Value value = 2;</code>
     */
    aialgorithms.proto2.RecordProto2.ValueOrBuilder getValueOrBuilder();
  }
  /**
   * Protobuf type {@code aialgorithms.proto2.MapEntry}
   */
  public static final class MapEntry extends
      com.google.protobuf.GeneratedMessage
      implements MapEntryOrBuilder {
    // Use MapEntry.newBuilder() to construct.
    private MapEntry(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private MapEntry(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final MapEntry defaultInstance;
    public static MapEntry getDefaultInstance() {
      return defaultInstance;
    }

    public MapEntry getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private MapEntry(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              bitField0_ |= 0x00000001;
              key_ = input.readBytes();
              break;
            }
            case 18: {
              aialgorithms.proto2.RecordProto2.Value.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = value_.toBuilder();
              }
              value_ = input.readMessage(aialgorithms.proto2.RecordProto2.Value.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(value_);
                value_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return aialgorithms.proto2.RecordProto2.internal_static_aialgorithms_proto2_MapEntry_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return aialgorithms.proto2.RecordProto2.internal_static_aialgorithms_proto2_MapEntry_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              aialgorithms.proto2.RecordProto2.MapEntry.class, aialgorithms.proto2.RecordProto2.MapEntry.Builder.class);
    }

    public static com.google.protobuf.Parser<MapEntry> PARSER =
        new com.google.protobuf.AbstractParser<MapEntry>() {
      public MapEntry parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new MapEntry(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<MapEntry> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional string key = 1;
    public static final int KEY_FIELD_NUMBER = 1;
    private java.lang.Object key_;
    /**
     * <code>optional string key = 1;</code>
     */
    public boolean hasKey() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional string key = 1;</code>
     */
    public java.lang.String getKey() {
      java.lang.Object ref = key_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          key_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string key = 1;</code>
     */
    public com.google.protobuf.ByteString
        getKeyBytes() {
      java.lang.Object ref = key_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        key_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional .aialgorithms.proto2.Value value = 2;
    public static final int VALUE_FIELD_NUMBER = 2;
    private aialgorithms.proto2.RecordProto2.Value value_;
    /**
     * <code>optional .aialgorithms.proto2.Value value = 2;</code>
     */
    public boolean hasValue() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional .aialgorithms.proto2.Value value = 2;</code>
     */
    public aialgorithms.proto2.RecordProto2.Value getValue() {
      return value_;
    }
    /**
     * <code>optional .aialgorithms.proto2.Value value = 2;</code>
     */
    public aialgorithms.proto2.RecordProto2.ValueOrBuilder getValueOrBuilder() {
      return value_;
    }

    private void initFields() {
      key_ = "";
      value_ = aialgorithms.proto2.RecordProto2.Value.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getKeyBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, value_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, getKeyBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, value_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static aialgorithms.proto2.RecordProto2.MapEntry parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static aialgorithms.proto2.RecordProto2.MapEntry parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static aialgorithms.proto2.RecordProto2.MapEntry parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static aialgorithms.proto2.RecordProto2.MapEntry parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static aialgorithms.proto2.RecordProto2.MapEntry parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static aialgorithms.proto2.RecordProto2.MapEntry parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static aialgorithms.proto2.RecordProto2.MapEntry parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static aialgorithms.proto2.RecordProto2.MapEntry parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static aialgorithms.proto2.RecordProto2.MapEntry parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static aialgorithms.proto2.RecordProto2.MapEntry parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(aialgorithms.proto2.RecordProto2.MapEntry prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code aialgorithms.proto2.MapEntry}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements aialgorithms.proto2.RecordProto2.MapEntryOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return aialgorithms.proto2.RecordProto2.internal_static_aialgorithms_proto2_MapEntry_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return aialgorithms.proto2.RecordProto2.internal_static_aialgorithms_proto2_MapEntry_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                aialgorithms.proto2.RecordProto2.MapEntry.class, aialgorithms.proto2.RecordProto2.MapEntry.Builder.class);
      }

      // Construct using aialgorithms.proto2.RecordProto2.MapEntry.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getValueFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        key_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        if (valueBuilder_ == null) {
          value_ = aialgorithms.proto2.RecordProto2.Value.getDefaultInstance();
        } else {
          valueBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return aialgorithms.proto2.RecordProto2.internal_static_aialgorithms_proto2_MapEntry_descriptor;
      }

      public aialgorithms.proto2.RecordProto2.MapEntry getDefaultInstanceForType() {
        return aialgorithms.proto2.RecordProto2.MapEntry.getDefaultInstance();
      }

      public aialgorithms.proto2.RecordProto2.MapEntry build() {
        aialgorithms.proto2.RecordProto2.MapEntry result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public aialgorithms.proto2.RecordProto2.MapEntry buildPartial() {
        aialgorithms.proto2.RecordProto2.MapEntry result = new aialgorithms.proto2.RecordProto2.MapEntry(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.key_ = key_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        if (valueBuilder_ == null) {
          result.value_ = value_;
        } else {
          result.value_ = valueBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof aialgorithms.proto2.RecordProto2.MapEntry) {
          return mergeFrom((aialgorithms.proto2.RecordProto2.MapEntry)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(aialgorithms.proto2.RecordProto2.MapEntry other) {
        if (other == aialgorithms.proto2.RecordProto2.MapEntry.getDefaultInstance()) return this;
        if (other.hasKey()) {
          bitField0_ |= 0x00000001;
          key_ = other.key_;
          onChanged();
        }
        if (other.hasValue()) {
          mergeValue(other.getValue());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        aialgorithms.proto2.RecordProto2.MapEntry parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (aialgorithms.proto2.RecordProto2.MapEntry) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional string key = 1;
      private java.lang.Object key_ = "";
      /**
       * <code>optional string key = 1;</code>
       */
      public boolean hasKey() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional string key = 1;</code>
       */
      public java.lang.String getKey() {
        java.lang.Object ref = key_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          key_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string key = 1;</code>
       */
      public com.google.protobuf.ByteString
          getKeyBytes() {
        java.lang.Object ref = key_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          key_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string key = 1;</code>
       */
      public Builder setKey(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        key_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string key = 1;</code>
       */
      public Builder clearKey() {
        bitField0_ = (bitField0_ & ~0x00000001);
        key_ = getDefaultInstance().getKey();
        onChanged();
        return this;
      }
      /**
       * <code>optional string key = 1;</code>
       */
      public Builder setKeyBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        key_ = value;
        onChanged();
        return this;
      }

      // optional .aialgorithms.proto2.Value value = 2;
      private aialgorithms.proto2.RecordProto2.Value value_ = aialgorithms.proto2.RecordProto2.Value.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          aialgorithms.proto2.RecordProto2.Value, aialgorithms.proto2.RecordProto2.Value.Builder, aialgorithms.proto2.RecordProto2.ValueOrBuilder> valueBuilder_;
      /**
       * <code>optional .aialgorithms.proto2.Value value = 2;</code>
       */
      public boolean hasValue() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .aialgorithms.proto2.Value value = 2;</code>
       */
      public aialgorithms.proto2.RecordProto2.Value getValue() {
        if (valueBuilder_ == null) {
          return value_;
        } else {
          return valueBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .aialgorithms.proto2.Value value = 2;</code>
       */
      public Builder setValue(aialgorithms.proto2.RecordProto2.Value value) {
        if (valueBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          value_ = value;
          onChanged();
        } else {
          valueBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .aialgorithms.proto2.Value value = 2;</code>
       */
      public Builder setValue(
          aialgorithms.proto2.RecordProto2.Value.Builder builderForValue) {
        if (valueBuilder_ == null) {
          value_ = builderForValue.build();
          onChanged();
        } else {
          valueBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .aialgorithms.proto2.Value value = 2;</code>
       */
      public Builder mergeValue(aialgorithms.proto2.RecordProto2.Value value) {
        if (valueBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              value_ != aialgorithms.proto2.RecordProto2.Value.getDefaultInstance()) {
            value_ =
              aialgorithms.proto2.RecordProto2.Value.newBuilder(value_).mergeFrom(value).buildPartial();
          } else {
            value_ = value;
          }
          onChanged();
        } else {
          valueBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .aialgorithms.proto2.Value value = 2;</code>
       */
      public Builder clearValue() {
        if (valueBuilder_ == null) {
          value_ = aialgorithms.proto2.RecordProto2.Value.getDefaultInstance();
          onChanged();
        } else {
          valueBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      /**
       * <code>optional .aialgorithms.proto2.Value value = 2;</code>
       */
      public aialgorithms.proto2.RecordProto2.Value.Builder getValueBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getValueFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .aialgorithms.proto2.Value value = 2;</code>
       */
      public aialgorithms.proto2.RecordProto2.ValueOrBuilder getValueOrBuilder() {
        if (valueBuilder_ != null) {
          return valueBuilder_.getMessageOrBuilder();
        } else {
          return value_;
        }
      }
      /**
       * <code>optional .aialgorithms.proto2.Value value = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          aialgorithms.proto2.RecordProto2.Value, aialgorithms.proto2.RecordProto2.Value.Builder, aialgorithms.proto2.RecordProto2.ValueOrBuilder> 
          getValueFieldBuilder() {
        if (valueBuilder_ == null) {
          valueBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              aialgorithms.proto2.RecordProto2.Value, aialgorithms.proto2.RecordProto2.Value.Builder, aialgorithms.proto2.RecordProto2.ValueOrBuilder>(
                  value_,
                  getParentForChildren(),
                  isClean());
          value_ = null;
        }
        return valueBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:aialgorithms.proto2.MapEntry)
    }

    static {
      defaultInstance = new MapEntry(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:aialgorithms.proto2.MapEntry)
  }

  public interface RecordOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // repeated .aialgorithms.proto2.MapEntry features = 1;
    /**
     * <code>repeated .aialgorithms.proto2.MapEntry features = 1;</code>
     *
     * <pre>
     * Map from the name of the feature to the value.
     *
     * For vectors and libsvm-like datasets,
     * a single feature with the name `values`
     * should be specified.
     * </pre>
     */
    java.util.List<aialgorithms.proto2.RecordProto2.MapEntry> 
        getFeaturesList();
    /**
     * <code>repeated .aialgorithms.proto2.MapEntry features = 1;</code>
     *
     * <pre>
     * Map from the name of the feature to the value.
     *
     * For vectors and libsvm-like datasets,
     * a single feature with the name `values`
     * should be specified.
     * </pre>
     */
    aialgorithms.proto2.RecordProto2.MapEntry getFeatures(int index);
    /**
     * <code>repeated .aialgorithms.proto2.MapEntry features = 1;</code>
     *
     * <pre>
     * Map from the name of the feature to the value.
     *
     * For vectors and libsvm-like datasets,
     * a single feature with the name `values`
     * should be specified.
     * </pre>
     */
    int getFeaturesCount();
    /**
     * <code>repeated .aialgorithms.proto2.MapEntry features = 1;</code>
     *
     * <pre>
     * Map from the name of the feature to the value.
     *
     * For vectors and libsvm-like datasets,
     * a single feature with the name `values`
     * should be specified.
     * </pre>
     */
    java.util.List<? extends aialgorithms.proto2.RecordProto2.MapEntryOrBuilder> 
        getFeaturesOrBuilderList();
    /**
     * <code>repeated .aialgorithms.proto2.MapEntry features = 1;</code>
     *
     * <pre>
     * Map from the name of the feature to the value.
     *
     * For vectors and libsvm-like datasets,
     * a single feature with the name `values`
     * should be specified.
     * </pre>
     */
    aialgorithms.proto2.RecordProto2.MapEntryOrBuilder getFeaturesOrBuilder(
        int index);

    // repeated .aialgorithms.proto2.MapEntry label = 2;
    /**
     * <code>repeated .aialgorithms.proto2.MapEntry label = 2;</code>
     *
     * <pre>
     * Optional set of labels for this record.
     * Similar to features field above, the key used for
     * generic scalar / vector labels should ve 'values'
     * </pre>
     */
    java.util.List<aialgorithms.proto2.RecordProto2.MapEntry> 
        getLabelList();
    /**
     * <code>repeated .aialgorithms.proto2.MapEntry label = 2;</code>
     *
     * <pre>
     * Optional set of labels for this record.
     * Similar to features field above, the key used for
     * generic scalar / vector labels should ve 'values'
     * </pre>
     */
    aialgorithms.proto2.RecordProto2.MapEntry getLabel(int index);
    /**
     * <code>repeated .aialgorithms.proto2.MapEntry label = 2;</code>
     *
     * <pre>
     * Optional set of labels for this record.
     * Similar to features field above, the key used for
     * generic scalar / vector labels should ve 'values'
     * </pre>
     */
    int getLabelCount();
    /**
     * <code>repeated .aialgorithms.proto2.MapEntry label = 2;</code>
     *
     * <pre>
     * Optional set of labels for this record.
     * Similar to features field above, the key used for
     * generic scalar / vector labels should ve 'values'
     * </pre>
     */
    java.util.List<? extends aialgorithms.proto2.RecordProto2.MapEntryOrBuilder> 
        getLabelOrBuilderList();
    /**
     * <code>repeated .aialgorithms.proto2.MapEntry label = 2;</code>
     *
     * <pre>
     * Optional set of labels for this record.
     * Similar to features field above, the key used for
     * generic scalar / vector labels should ve 'values'
     * </pre>
     */
    aialgorithms.proto2.RecordProto2.MapEntryOrBuilder getLabelOrBuilder(
        int index);

    // optional string uid = 3;
    /**
     * <code>optional string uid = 3;</code>
     *
     * <pre>
     * Unique identifier for this record in the dataset.
     *
     * Whilst not necessary, this allows better
     * debugging where there are data issues.
     *
     * This is not used by the algorithm directly.
     * </pre>
     */
    boolean hasUid();
    /**
     * <code>optional string uid = 3;</code>
     *
     * <pre>
     * Unique identifier for this record in the dataset.
     *
     * Whilst not necessary, this allows better
     * debugging where there are data issues.
     *
     * This is not used by the algorithm directly.
     * </pre>
     */
    java.lang.String getUid();
    /**
     * <code>optional string uid = 3;</code>
     *
     * <pre>
     * Unique identifier for this record in the dataset.
     *
     * Whilst not necessary, this allows better
     * debugging where there are data issues.
     *
     * This is not used by the algorithm directly.
     * </pre>
     */
    com.google.protobuf.ByteString
        getUidBytes();

    // optional string metadata = 4;
    /**
     * <code>optional string metadata = 4;</code>
     *
     * <pre>
     * Textual metadata describing the record.
     *
     * This may include JSON-serialized information
     * about the source of the record.
     *
     * This is not used by the algorithm directly.
     * </pre>
     */
    boolean hasMetadata();
    /**
     * <code>optional string metadata = 4;</code>
     *
     * <pre>
     * Textual metadata describing the record.
     *
     * This may include JSON-serialized information
     * about the source of the record.
     *
     * This is not used by the algorithm directly.
     * </pre>
     */
    java.lang.String getMetadata();
    /**
     * <code>optional string metadata = 4;</code>
     *
     * <pre>
     * Textual metadata describing the record.
     *
     * This may include JSON-serialized information
     * about the source of the record.
     *
     * This is not used by the algorithm directly.
     * </pre>
     */
    com.google.protobuf.ByteString
        getMetadataBytes();

    // optional string configuration = 5;
    /**
     * <code>optional string configuration = 5;</code>
     *
     * <pre>
     * Optional serialized JSON object that allows per-record
     * hyper-parameters/configuration/other information to be set.
     *
     * The meaning/interpretation of this field is defined by
     * the algorithm author and may not be supported.
     *
     * This is used to pass additional inference configuration
     * when batch inference is used (e.g. types of scores to return).
     * </pre>
     */
    boolean hasConfiguration();
    /**
     * <code>optional string configuration = 5;</code>
     *
     * <pre>
     * Optional serialized JSON object that allows per-record
     * hyper-parameters/configuration/other information to be set.
     *
     * The meaning/interpretation of this field is defined by
     * the algorithm author and may not be supported.
     *
     * This is used to pass additional inference configuration
     * when batch inference is used (e.g. types of scores to return).
     * </pre>
     */
    java.lang.String getConfiguration();
    /**
     * <code>optional string configuration = 5;</code>
     *
     * <pre>
     * Optional serialized JSON object that allows per-record
     * hyper-parameters/configuration/other information to be set.
     *
     * The meaning/interpretation of this field is defined by
     * the algorithm author and may not be supported.
     *
     * This is used to pass additional inference configuration
     * when batch inference is used (e.g. types of scores to return).
     * </pre>
     */
    com.google.protobuf.ByteString
        getConfigurationBytes();
  }
  /**
   * Protobuf type {@code aialgorithms.proto2.Record}
   */
  public static final class Record extends
      com.google.protobuf.GeneratedMessage
      implements RecordOrBuilder {
    // Use Record.newBuilder() to construct.
    private Record(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Record(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Record defaultInstance;
    public static Record getDefaultInstance() {
      return defaultInstance;
    }

    public Record getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Record(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                features_ = new java.util.ArrayList<aialgorithms.proto2.RecordProto2.MapEntry>();
                mutable_bitField0_ |= 0x00000001;
              }
              features_.add(input.readMessage(aialgorithms.proto2.RecordProto2.MapEntry.PARSER, extensionRegistry));
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                label_ = new java.util.ArrayList<aialgorithms.proto2.RecordProto2.MapEntry>();
                mutable_bitField0_ |= 0x00000002;
              }
              label_.add(input.readMessage(aialgorithms.proto2.RecordProto2.MapEntry.PARSER, extensionRegistry));
              break;
            }
            case 26: {
              bitField0_ |= 0x00000001;
              uid_ = input.readBytes();
              break;
            }
            case 34: {
              bitField0_ |= 0x00000002;
              metadata_ = input.readBytes();
              break;
            }
            case 42: {
              bitField0_ |= 0x00000004;
              configuration_ = input.readBytes();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          features_ = java.util.Collections.unmodifiableList(features_);
        }
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          label_ = java.util.Collections.unmodifiableList(label_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return aialgorithms.proto2.RecordProto2.internal_static_aialgorithms_proto2_Record_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return aialgorithms.proto2.RecordProto2.internal_static_aialgorithms_proto2_Record_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              aialgorithms.proto2.RecordProto2.Record.class, aialgorithms.proto2.RecordProto2.Record.Builder.class);
    }

    public static com.google.protobuf.Parser<Record> PARSER =
        new com.google.protobuf.AbstractParser<Record>() {
      public Record parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Record(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Record> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // repeated .aialgorithms.proto2.MapEntry features = 1;
    public static final int FEATURES_FIELD_NUMBER = 1;
    private java.util.List<aialgorithms.proto2.RecordProto2.MapEntry> features_;
    /**
     * <code>repeated .aialgorithms.proto2.MapEntry features = 1;</code>
     *
     * <pre>
     * Map from the name of the feature to the value.
     *
     * For vectors and libsvm-like datasets,
     * a single feature with the name `values`
     * should be specified.
     * </pre>
     */
    public java.util.List<aialgorithms.proto2.RecordProto2.MapEntry> getFeaturesList() {
      return features_;
    }
    /**
     * <code>repeated .aialgorithms.proto2.MapEntry features = 1;</code>
     *
     * <pre>
     * Map from the name of the feature to the value.
     *
     * For vectors and libsvm-like datasets,
     * a single feature with the name `values`
     * should be specified.
     * </pre>
     */
    public java.util.List<? extends aialgorithms.proto2.RecordProto2.MapEntryOrBuilder> 
        getFeaturesOrBuilderList() {
      return features_;
    }
    /**
     * <code>repeated .aialgorithms.proto2.MapEntry features = 1;</code>
     *
     * <pre>
     * Map from the name of the feature to the value.
     *
     * For vectors and libsvm-like datasets,
     * a single feature with the name `values`
     * should be specified.
     * </pre>
     */
    public int getFeaturesCount() {
      return features_.size();
    }
    /**
     * <code>repeated .aialgorithms.proto2.MapEntry features = 1;</code>
     *
     * <pre>
     * Map from the name of the feature to the value.
     *
     * For vectors and libsvm-like datasets,
     * a single feature with the name `values`
     * should be specified.
     * </pre>
     */
    public aialgorithms.proto2.RecordProto2.MapEntry getFeatures(int index) {
      return features_.get(index);
    }
    /**
     * <code>repeated .aialgorithms.proto2.MapEntry features = 1;</code>
     *
     * <pre>
     * Map from the name of the feature to the value.
     *
     * For vectors and libsvm-like datasets,
     * a single feature with the name `values`
     * should be specified.
     * </pre>
     */
    public aialgorithms.proto2.RecordProto2.MapEntryOrBuilder getFeaturesOrBuilder(
        int index) {
      return features_.get(index);
    }

    // repeated .aialgorithms.proto2.MapEntry label = 2;
    public static final int LABEL_FIELD_NUMBER = 2;
    private java.util.List<aialgorithms.proto2.RecordProto2.MapEntry> label_;
    /**
     * <code>repeated .aialgorithms.proto2.MapEntry label = 2;</code>
     *
     * <pre>
     * Optional set of labels for this record.
     * Similar to features field above, the key used for
     * generic scalar / vector labels should ve 'values'
     * </pre>
     */
    public java.util.List<aialgorithms.proto2.RecordProto2.MapEntry> getLabelList() {
      return label_;
    }
    /**
     * <code>repeated .aialgorithms.proto2.MapEntry label = 2;</code>
     *
     * <pre>
     * Optional set of labels for this record.
     * Similar to features field above, the key used for
     * generic scalar / vector labels should ve 'values'
     * </pre>
     */
    public java.util.List<? extends aialgorithms.proto2.RecordProto2.MapEntryOrBuilder> 
        getLabelOrBuilderList() {
      return label_;
    }
    /**
     * <code>repeated .aialgorithms.proto2.MapEntry label = 2;</code>
     *
     * <pre>
     * Optional set of labels for this record.
     * Similar to features field above, the key used for
     * generic scalar / vector labels should ve 'values'
     * </pre>
     */
    public int getLabelCount() {
      return label_.size();
    }
    /**
     * <code>repeated .aialgorithms.proto2.MapEntry label = 2;</code>
     *
     * <pre>
     * Optional set of labels for this record.
     * Similar to features field above, the key used for
     * generic scalar / vector labels should ve 'values'
     * </pre>
     */
    public aialgorithms.proto2.RecordProto2.MapEntry getLabel(int index) {
      return label_.get(index);
    }
    /**
     * <code>repeated .aialgorithms.proto2.MapEntry label = 2;</code>
     *
     * <pre>
     * Optional set of labels for this record.
     * Similar to features field above, the key used for
     * generic scalar / vector labels should ve 'values'
     * </pre>
     */
    public aialgorithms.proto2.RecordProto2.MapEntryOrBuilder getLabelOrBuilder(
        int index) {
      return label_.get(index);
    }

    // optional string uid = 3;
    public static final int UID_FIELD_NUMBER = 3;
    private java.lang.Object uid_;
    /**
     * <code>optional string uid = 3;</code>
     *
     * <pre>
     * Unique identifier for this record in the dataset.
     *
     * Whilst not necessary, this allows better
     * debugging where there are data issues.
     *
     * This is not used by the algorithm directly.
     * </pre>
     */
    public boolean hasUid() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional string uid = 3;</code>
     *
     * <pre>
     * Unique identifier for this record in the dataset.
     *
     * Whilst not necessary, this allows better
     * debugging where there are data issues.
     *
     * This is not used by the algorithm directly.
     * </pre>
     */
    public java.lang.String getUid() {
      java.lang.Object ref = uid_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          uid_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string uid = 3;</code>
     *
     * <pre>
     * Unique identifier for this record in the dataset.
     *
     * Whilst not necessary, this allows better
     * debugging where there are data issues.
     *
     * This is not used by the algorithm directly.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getUidBytes() {
      java.lang.Object ref = uid_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        uid_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional string metadata = 4;
    public static final int METADATA_FIELD_NUMBER = 4;
    private java.lang.Object metadata_;
    /**
     * <code>optional string metadata = 4;</code>
     *
     * <pre>
     * Textual metadata describing the record.
     *
     * This may include JSON-serialized information
     * about the source of the record.
     *
     * This is not used by the algorithm directly.
     * </pre>
     */
    public boolean hasMetadata() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional string metadata = 4;</code>
     *
     * <pre>
     * Textual metadata describing the record.
     *
     * This may include JSON-serialized information
     * about the source of the record.
     *
     * This is not used by the algorithm directly.
     * </pre>
     */
    public java.lang.String getMetadata() {
      java.lang.Object ref = metadata_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          metadata_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string metadata = 4;</code>
     *
     * <pre>
     * Textual metadata describing the record.
     *
     * This may include JSON-serialized information
     * about the source of the record.
     *
     * This is not used by the algorithm directly.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getMetadataBytes() {
      java.lang.Object ref = metadata_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        metadata_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional string configuration = 5;
    public static final int CONFIGURATION_FIELD_NUMBER = 5;
    private java.lang.Object configuration_;
    /**
     * <code>optional string configuration = 5;</code>
     *
     * <pre>
     * Optional serialized JSON object that allows per-record
     * hyper-parameters/configuration/other information to be set.
     *
     * The meaning/interpretation of this field is defined by
     * the algorithm author and may not be supported.
     *
     * This is used to pass additional inference configuration
     * when batch inference is used (e.g. types of scores to return).
     * </pre>
     */
    public boolean hasConfiguration() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional string configuration = 5;</code>
     *
     * <pre>
     * Optional serialized JSON object that allows per-record
     * hyper-parameters/configuration/other information to be set.
     *
     * The meaning/interpretation of this field is defined by
     * the algorithm author and may not be supported.
     *
     * This is used to pass additional inference configuration
     * when batch inference is used (e.g. types of scores to return).
     * </pre>
     */
    public java.lang.String getConfiguration() {
      java.lang.Object ref = configuration_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          configuration_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string configuration = 5;</code>
     *
     * <pre>
     * Optional serialized JSON object that allows per-record
     * hyper-parameters/configuration/other information to be set.
     *
     * The meaning/interpretation of this field is defined by
     * the algorithm author and may not be supported.
     *
     * This is used to pass additional inference configuration
     * when batch inference is used (e.g. types of scores to return).
     * </pre>
     */
    public com.google.protobuf.ByteString
        getConfigurationBytes() {
      java.lang.Object ref = configuration_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        configuration_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private void initFields() {
      features_ = java.util.Collections.emptyList();
      label_ = java.util.Collections.emptyList();
      uid_ = "";
      metadata_ = "";
      configuration_ = "";
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < features_.size(); i++) {
        output.writeMessage(1, features_.get(i));
      }
      for (int i = 0; i < label_.size(); i++) {
        output.writeMessage(2, label_.get(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(3, getUidBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(4, getMetadataBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBytes(5, getConfigurationBytes());
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < features_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, features_.get(i));
      }
      for (int i = 0; i < label_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, label_.get(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(3, getUidBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(4, getMetadataBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(5, getConfigurationBytes());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static aialgorithms.proto2.RecordProto2.Record parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static aialgorithms.proto2.RecordProto2.Record parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static aialgorithms.proto2.RecordProto2.Record parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static aialgorithms.proto2.RecordProto2.Record parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static aialgorithms.proto2.RecordProto2.Record parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static aialgorithms.proto2.RecordProto2.Record parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static aialgorithms.proto2.RecordProto2.Record parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static aialgorithms.proto2.RecordProto2.Record parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static aialgorithms.proto2.RecordProto2.Record parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static aialgorithms.proto2.RecordProto2.Record parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(aialgorithms.proto2.RecordProto2.Record prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code aialgorithms.proto2.Record}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements aialgorithms.proto2.RecordProto2.RecordOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return aialgorithms.proto2.RecordProto2.internal_static_aialgorithms_proto2_Record_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return aialgorithms.proto2.RecordProto2.internal_static_aialgorithms_proto2_Record_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                aialgorithms.proto2.RecordProto2.Record.class, aialgorithms.proto2.RecordProto2.Record.Builder.class);
      }

      // Construct using aialgorithms.proto2.RecordProto2.Record.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getFeaturesFieldBuilder();
          getLabelFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (featuresBuilder_ == null) {
          features_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          featuresBuilder_.clear();
        }
        if (labelBuilder_ == null) {
          label_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          labelBuilder_.clear();
        }
        uid_ = "";
        bitField0_ = (bitField0_ & ~0x00000004);
        metadata_ = "";
        bitField0_ = (bitField0_ & ~0x00000008);
        configuration_ = "";
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return aialgorithms.proto2.RecordProto2.internal_static_aialgorithms_proto2_Record_descriptor;
      }

      public aialgorithms.proto2.RecordProto2.Record getDefaultInstanceForType() {
        return aialgorithms.proto2.RecordProto2.Record.getDefaultInstance();
      }

      public aialgorithms.proto2.RecordProto2.Record build() {
        aialgorithms.proto2.RecordProto2.Record result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public aialgorithms.proto2.RecordProto2.Record buildPartial() {
        aialgorithms.proto2.RecordProto2.Record result = new aialgorithms.proto2.RecordProto2.Record(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (featuresBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            features_ = java.util.Collections.unmodifiableList(features_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.features_ = features_;
        } else {
          result.features_ = featuresBuilder_.build();
        }
        if (labelBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            label_ = java.util.Collections.unmodifiableList(label_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.label_ = label_;
        } else {
          result.label_ = labelBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000001;
        }
        result.uid_ = uid_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000002;
        }
        result.metadata_ = metadata_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000004;
        }
        result.configuration_ = configuration_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof aialgorithms.proto2.RecordProto2.Record) {
          return mergeFrom((aialgorithms.proto2.RecordProto2.Record)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(aialgorithms.proto2.RecordProto2.Record other) {
        if (other == aialgorithms.proto2.RecordProto2.Record.getDefaultInstance()) return this;
        if (featuresBuilder_ == null) {
          if (!other.features_.isEmpty()) {
            if (features_.isEmpty()) {
              features_ = other.features_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureFeaturesIsMutable();
              features_.addAll(other.features_);
            }
            onChanged();
          }
        } else {
          if (!other.features_.isEmpty()) {
            if (featuresBuilder_.isEmpty()) {
              featuresBuilder_.dispose();
              featuresBuilder_ = null;
              features_ = other.features_;
              bitField0_ = (bitField0_ & ~0x00000001);
              featuresBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getFeaturesFieldBuilder() : null;
            } else {
              featuresBuilder_.addAllMessages(other.features_);
            }
          }
        }
        if (labelBuilder_ == null) {
          if (!other.label_.isEmpty()) {
            if (label_.isEmpty()) {
              label_ = other.label_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureLabelIsMutable();
              label_.addAll(other.label_);
            }
            onChanged();
          }
        } else {
          if (!other.label_.isEmpty()) {
            if (labelBuilder_.isEmpty()) {
              labelBuilder_.dispose();
              labelBuilder_ = null;
              label_ = other.label_;
              bitField0_ = (bitField0_ & ~0x00000002);
              labelBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getLabelFieldBuilder() : null;
            } else {
              labelBuilder_.addAllMessages(other.label_);
            }
          }
        }
        if (other.hasUid()) {
          bitField0_ |= 0x00000004;
          uid_ = other.uid_;
          onChanged();
        }
        if (other.hasMetadata()) {
          bitField0_ |= 0x00000008;
          metadata_ = other.metadata_;
          onChanged();
        }
        if (other.hasConfiguration()) {
          bitField0_ |= 0x00000010;
          configuration_ = other.configuration_;
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        aialgorithms.proto2.RecordProto2.Record parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (aialgorithms.proto2.RecordProto2.Record) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // repeated .aialgorithms.proto2.MapEntry features = 1;
      private java.util.List<aialgorithms.proto2.RecordProto2.MapEntry> features_ =
        java.util.Collections.emptyList();
      private void ensureFeaturesIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          features_ = new java.util.ArrayList<aialgorithms.proto2.RecordProto2.MapEntry>(features_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          aialgorithms.proto2.RecordProto2.MapEntry, aialgorithms.proto2.RecordProto2.MapEntry.Builder, aialgorithms.proto2.RecordProto2.MapEntryOrBuilder> featuresBuilder_;

      /**
       * <code>repeated .aialgorithms.proto2.MapEntry features = 1;</code>
       *
       * <pre>
       * Map from the name of the feature to the value.
       *
       * For vectors and libsvm-like datasets,
       * a single feature with the name `values`
       * should be specified.
       * </pre>
       */
      public java.util.List<aialgorithms.proto2.RecordProto2.MapEntry> getFeaturesList() {
        if (featuresBuilder_ == null) {
          return java.util.Collections.unmodifiableList(features_);
        } else {
          return featuresBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .aialgorithms.proto2.MapEntry features = 1;</code>
       *
       * <pre>
       * Map from the name of the feature to the value.
       *
       * For vectors and libsvm-like datasets,
       * a single feature with the name `values`
       * should be specified.
       * </pre>
       */
      public int getFeaturesCount() {
        if (featuresBuilder_ == null) {
          return features_.size();
        } else {
          return featuresBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .aialgorithms.proto2.MapEntry features = 1;</code>
       *
       * <pre>
       * Map from the name of the feature to the value.
       *
       * For vectors and libsvm-like datasets,
       * a single feature with the name `values`
       * should be specified.
       * </pre>
       */
      public aialgorithms.proto2.RecordProto2.MapEntry getFeatures(int index) {
        if (featuresBuilder_ == null) {
          return features_.get(index);
        } else {
          return featuresBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .aialgorithms.proto2.MapEntry features = 1;</code>
       *
       * <pre>
       * Map from the name of the feature to the value.
       *
       * For vectors and libsvm-like datasets,
       * a single feature with the name `values`
       * should be specified.
       * </pre>
       */
      public Builder setFeatures(
          int index, aialgorithms.proto2.RecordProto2.MapEntry value) {
        if (featuresBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFeaturesIsMutable();
          features_.set(index, value);
          onChanged();
        } else {
          featuresBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .aialgorithms.proto2.MapEntry features = 1;</code>
       *
       * <pre>
       * Map from the name of the feature to the value.
       *
       * For vectors and libsvm-like datasets,
       * a single feature with the name `values`
       * should be specified.
       * </pre>
       */
      public Builder setFeatures(
          int index, aialgorithms.proto2.RecordProto2.MapEntry.Builder builderForValue) {
        if (featuresBuilder_ == null) {
          ensureFeaturesIsMutable();
          features_.set(index, builderForValue.build());
          onChanged();
        } else {
          featuresBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .aialgorithms.proto2.MapEntry features = 1;</code>
       *
       * <pre>
       * Map from the name of the feature to the value.
       *
       * For vectors and libsvm-like datasets,
       * a single feature with the name `values`
       * should be specified.
       * </pre>
       */
      public Builder addFeatures(aialgorithms.proto2.RecordProto2.MapEntry value) {
        if (featuresBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFeaturesIsMutable();
          features_.add(value);
          onChanged();
        } else {
          featuresBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .aialgorithms.proto2.MapEntry features = 1;</code>
       *
       * <pre>
       * Map from the name of the feature to the value.
       *
       * For vectors and libsvm-like datasets,
       * a single feature with the name `values`
       * should be specified.
       * </pre>
       */
      public Builder addFeatures(
          int index, aialgorithms.proto2.RecordProto2.MapEntry value) {
        if (featuresBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFeaturesIsMutable();
          features_.add(index, value);
          onChanged();
        } else {
          featuresBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .aialgorithms.proto2.MapEntry features = 1;</code>
       *
       * <pre>
       * Map from the name of the feature to the value.
       *
       * For vectors and libsvm-like datasets,
       * a single feature with the name `values`
       * should be specified.
       * </pre>
       */
      public Builder addFeatures(
          aialgorithms.proto2.RecordProto2.MapEntry.Builder builderForValue) {
        if (featuresBuilder_ == null) {
          ensureFeaturesIsMutable();
          features_.add(builderForValue.build());
          onChanged();
        } else {
          featuresBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .aialgorithms.proto2.MapEntry features = 1;</code>
       *
       * <pre>
       * Map from the name of the feature to the value.
       *
       * For vectors and libsvm-like datasets,
       * a single feature with the name `values`
       * should be specified.
       * </pre>
       */
      public Builder addFeatures(
          int index, aialgorithms.proto2.RecordProto2.MapEntry.Builder builderForValue) {
        if (featuresBuilder_ == null) {
          ensureFeaturesIsMutable();
          features_.add(index, builderForValue.build());
          onChanged();
        } else {
          featuresBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .aialgorithms.proto2.MapEntry features = 1;</code>
       *
       * <pre>
       * Map from the name of the feature to the value.
       *
       * For vectors and libsvm-like datasets,
       * a single feature with the name `values`
       * should be specified.
       * </pre>
       */
      public Builder addAllFeatures(
          java.lang.Iterable<? extends aialgorithms.proto2.RecordProto2.MapEntry> values) {
        if (featuresBuilder_ == null) {
          ensureFeaturesIsMutable();
          super.addAll(values, features_);
          onChanged();
        } else {
          featuresBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .aialgorithms.proto2.MapEntry features = 1;</code>
       *
       * <pre>
       * Map from the name of the feature to the value.
       *
       * For vectors and libsvm-like datasets,
       * a single feature with the name `values`
       * should be specified.
       * </pre>
       */
      public Builder clearFeatures() {
        if (featuresBuilder_ == null) {
          features_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          featuresBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .aialgorithms.proto2.MapEntry features = 1;</code>
       *
       * <pre>
       * Map from the name of the feature to the value.
       *
       * For vectors and libsvm-like datasets,
       * a single feature with the name `values`
       * should be specified.
       * </pre>
       */
      public Builder removeFeatures(int index) {
        if (featuresBuilder_ == null) {
          ensureFeaturesIsMutable();
          features_.remove(index);
          onChanged();
        } else {
          featuresBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .aialgorithms.proto2.MapEntry features = 1;</code>
       *
       * <pre>
       * Map from the name of the feature to the value.
       *
       * For vectors and libsvm-like datasets,
       * a single feature with the name `values`
       * should be specified.
       * </pre>
       */
      public aialgorithms.proto2.RecordProto2.MapEntry.Builder getFeaturesBuilder(
          int index) {
        return getFeaturesFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .aialgorithms.proto2.MapEntry features = 1;</code>
       *
       * <pre>
       * Map from the name of the feature to the value.
       *
       * For vectors and libsvm-like datasets,
       * a single feature with the name `values`
       * should be specified.
       * </pre>
       */
      public aialgorithms.proto2.RecordProto2.MapEntryOrBuilder getFeaturesOrBuilder(
          int index) {
        if (featuresBuilder_ == null) {
          return features_.get(index);  } else {
          return featuresBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .aialgorithms.proto2.MapEntry features = 1;</code>
       *
       * <pre>
       * Map from the name of the feature to the value.
       *
       * For vectors and libsvm-like datasets,
       * a single feature with the name `values`
       * should be specified.
       * </pre>
       */
      public java.util.List<? extends aialgorithms.proto2.RecordProto2.MapEntryOrBuilder> 
           getFeaturesOrBuilderList() {
        if (featuresBuilder_ != null) {
          return featuresBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(features_);
        }
      }
      /**
       * <code>repeated .aialgorithms.proto2.MapEntry features = 1;</code>
       *
       * <pre>
       * Map from the name of the feature to the value.
       *
       * For vectors and libsvm-like datasets,
       * a single feature with the name `values`
       * should be specified.
       * </pre>
       */
      public aialgorithms.proto2.RecordProto2.MapEntry.Builder addFeaturesBuilder() {
        return getFeaturesFieldBuilder().addBuilder(
            aialgorithms.proto2.RecordProto2.MapEntry.getDefaultInstance());
      }
      /**
       * <code>repeated .aialgorithms.proto2.MapEntry features = 1;</code>
       *
       * <pre>
       * Map from the name of the feature to the value.
       *
       * For vectors and libsvm-like datasets,
       * a single feature with the name `values`
       * should be specified.
       * </pre>
       */
      public aialgorithms.proto2.RecordProto2.MapEntry.Builder addFeaturesBuilder(
          int index) {
        return getFeaturesFieldBuilder().addBuilder(
            index, aialgorithms.proto2.RecordProto2.MapEntry.getDefaultInstance());
      }
      /**
       * <code>repeated .aialgorithms.proto2.MapEntry features = 1;</code>
       *
       * <pre>
       * Map from the name of the feature to the value.
       *
       * For vectors and libsvm-like datasets,
       * a single feature with the name `values`
       * should be specified.
       * </pre>
       */
      public java.util.List<aialgorithms.proto2.RecordProto2.MapEntry.Builder> 
           getFeaturesBuilderList() {
        return getFeaturesFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          aialgorithms.proto2.RecordProto2.MapEntry, aialgorithms.proto2.RecordProto2.MapEntry.Builder, aialgorithms.proto2.RecordProto2.MapEntryOrBuilder> 
          getFeaturesFieldBuilder() {
        if (featuresBuilder_ == null) {
          featuresBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              aialgorithms.proto2.RecordProto2.MapEntry, aialgorithms.proto2.RecordProto2.MapEntry.Builder, aialgorithms.proto2.RecordProto2.MapEntryOrBuilder>(
                  features_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          features_ = null;
        }
        return featuresBuilder_;
      }

      // repeated .aialgorithms.proto2.MapEntry label = 2;
      private java.util.List<aialgorithms.proto2.RecordProto2.MapEntry> label_ =
        java.util.Collections.emptyList();
      private void ensureLabelIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          label_ = new java.util.ArrayList<aialgorithms.proto2.RecordProto2.MapEntry>(label_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          aialgorithms.proto2.RecordProto2.MapEntry, aialgorithms.proto2.RecordProto2.MapEntry.Builder, aialgorithms.proto2.RecordProto2.MapEntryOrBuilder> labelBuilder_;

      /**
       * <code>repeated .aialgorithms.proto2.MapEntry label = 2;</code>
       *
       * <pre>
       * Optional set of labels for this record.
       * Similar to features field above, the key used for
       * generic scalar / vector labels should ve 'values'
       * </pre>
       */
      public java.util.List<aialgorithms.proto2.RecordProto2.MapEntry> getLabelList() {
        if (labelBuilder_ == null) {
          return java.util.Collections.unmodifiableList(label_);
        } else {
          return labelBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .aialgorithms.proto2.MapEntry label = 2;</code>
       *
       * <pre>
       * Optional set of labels for this record.
       * Similar to features field above, the key used for
       * generic scalar / vector labels should ve 'values'
       * </pre>
       */
      public int getLabelCount() {
        if (labelBuilder_ == null) {
          return label_.size();
        } else {
          return labelBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .aialgorithms.proto2.MapEntry label = 2;</code>
       *
       * <pre>
       * Optional set of labels for this record.
       * Similar to features field above, the key used for
       * generic scalar / vector labels should ve 'values'
       * </pre>
       */
      public aialgorithms.proto2.RecordProto2.MapEntry getLabel(int index) {
        if (labelBuilder_ == null) {
          return label_.get(index);
        } else {
          return labelBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .aialgorithms.proto2.MapEntry label = 2;</code>
       *
       * <pre>
       * Optional set of labels for this record.
       * Similar to features field above, the key used for
       * generic scalar / vector labels should ve 'values'
       * </pre>
       */
      public Builder setLabel(
          int index, aialgorithms.proto2.RecordProto2.MapEntry value) {
        if (labelBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLabelIsMutable();
          label_.set(index, value);
          onChanged();
        } else {
          labelBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .aialgorithms.proto2.MapEntry label = 2;</code>
       *
       * <pre>
       * Optional set of labels for this record.
       * Similar to features field above, the key used for
       * generic scalar / vector labels should ve 'values'
       * </pre>
       */
      public Builder setLabel(
          int index, aialgorithms.proto2.RecordProto2.MapEntry.Builder builderForValue) {
        if (labelBuilder_ == null) {
          ensureLabelIsMutable();
          label_.set(index, builderForValue.build());
          onChanged();
        } else {
          labelBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .aialgorithms.proto2.MapEntry label = 2;</code>
       *
       * <pre>
       * Optional set of labels for this record.
       * Similar to features field above, the key used for
       * generic scalar / vector labels should ve 'values'
       * </pre>
       */
      public Builder addLabel(aialgorithms.proto2.RecordProto2.MapEntry value) {
        if (labelBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLabelIsMutable();
          label_.add(value);
          onChanged();
        } else {
          labelBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .aialgorithms.proto2.MapEntry label = 2;</code>
       *
       * <pre>
       * Optional set of labels for this record.
       * Similar to features field above, the key used for
       * generic scalar / vector labels should ve 'values'
       * </pre>
       */
      public Builder addLabel(
          int index, aialgorithms.proto2.RecordProto2.MapEntry value) {
        if (labelBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLabelIsMutable();
          label_.add(index, value);
          onChanged();
        } else {
          labelBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .aialgorithms.proto2.MapEntry label = 2;</code>
       *
       * <pre>
       * Optional set of labels for this record.
       * Similar to features field above, the key used for
       * generic scalar / vector labels should ve 'values'
       * </pre>
       */
      public Builder addLabel(
          aialgorithms.proto2.RecordProto2.MapEntry.Builder builderForValue) {
        if (labelBuilder_ == null) {
          ensureLabelIsMutable();
          label_.add(builderForValue.build());
          onChanged();
        } else {
          labelBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .aialgorithms.proto2.MapEntry label = 2;</code>
       *
       * <pre>
       * Optional set of labels for this record.
       * Similar to features field above, the key used for
       * generic scalar / vector labels should ve 'values'
       * </pre>
       */
      public Builder addLabel(
          int index, aialgorithms.proto2.RecordProto2.MapEntry.Builder builderForValue) {
        if (labelBuilder_ == null) {
          ensureLabelIsMutable();
          label_.add(index, builderForValue.build());
          onChanged();
        } else {
          labelBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .aialgorithms.proto2.MapEntry label = 2;</code>
       *
       * <pre>
       * Optional set of labels for this record.
       * Similar to features field above, the key used for
       * generic scalar / vector labels should ve 'values'
       * </pre>
       */
      public Builder addAllLabel(
          java.lang.Iterable<? extends aialgorithms.proto2.RecordProto2.MapEntry> values) {
        if (labelBuilder_ == null) {
          ensureLabelIsMutable();
          super.addAll(values, label_);
          onChanged();
        } else {
          labelBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .aialgorithms.proto2.MapEntry label = 2;</code>
       *
       * <pre>
       * Optional set of labels for this record.
       * Similar to features field above, the key used for
       * generic scalar / vector labels should ve 'values'
       * </pre>
       */
      public Builder clearLabel() {
        if (labelBuilder_ == null) {
          label_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          labelBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .aialgorithms.proto2.MapEntry label = 2;</code>
       *
       * <pre>
       * Optional set of labels for this record.
       * Similar to features field above, the key used for
       * generic scalar / vector labels should ve 'values'
       * </pre>
       */
      public Builder removeLabel(int index) {
        if (labelBuilder_ == null) {
          ensureLabelIsMutable();
          label_.remove(index);
          onChanged();
        } else {
          labelBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .aialgorithms.proto2.MapEntry label = 2;</code>
       *
       * <pre>
       * Optional set of labels for this record.
       * Similar to features field above, the key used for
       * generic scalar / vector labels should ve 'values'
       * </pre>
       */
      public aialgorithms.proto2.RecordProto2.MapEntry.Builder getLabelBuilder(
          int index) {
        return getLabelFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .aialgorithms.proto2.MapEntry label = 2;</code>
       *
       * <pre>
       * Optional set of labels for this record.
       * Similar to features field above, the key used for
       * generic scalar / vector labels should ve 'values'
       * </pre>
       */
      public aialgorithms.proto2.RecordProto2.MapEntryOrBuilder getLabelOrBuilder(
          int index) {
        if (labelBuilder_ == null) {
          return label_.get(index);  } else {
          return labelBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .aialgorithms.proto2.MapEntry label = 2;</code>
       *
       * <pre>
       * Optional set of labels for this record.
       * Similar to features field above, the key used for
       * generic scalar / vector labels should ve 'values'
       * </pre>
       */
      public java.util.List<? extends aialgorithms.proto2.RecordProto2.MapEntryOrBuilder> 
           getLabelOrBuilderList() {
        if (labelBuilder_ != null) {
          return labelBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(label_);
        }
      }
      /**
       * <code>repeated .aialgorithms.proto2.MapEntry label = 2;</code>
       *
       * <pre>
       * Optional set of labels for this record.
       * Similar to features field above, the key used for
       * generic scalar / vector labels should ve 'values'
       * </pre>
       */
      public aialgorithms.proto2.RecordProto2.MapEntry.Builder addLabelBuilder() {
        return getLabelFieldBuilder().addBuilder(
            aialgorithms.proto2.RecordProto2.MapEntry.getDefaultInstance());
      }
      /**
       * <code>repeated .aialgorithms.proto2.MapEntry label = 2;</code>
       *
       * <pre>
       * Optional set of labels for this record.
       * Similar to features field above, the key used for
       * generic scalar / vector labels should ve 'values'
       * </pre>
       */
      public aialgorithms.proto2.RecordProto2.MapEntry.Builder addLabelBuilder(
          int index) {
        return getLabelFieldBuilder().addBuilder(
            index, aialgorithms.proto2.RecordProto2.MapEntry.getDefaultInstance());
      }
      /**
       * <code>repeated .aialgorithms.proto2.MapEntry label = 2;</code>
       *
       * <pre>
       * Optional set of labels for this record.
       * Similar to features field above, the key used for
       * generic scalar / vector labels should ve 'values'
       * </pre>
       */
      public java.util.List<aialgorithms.proto2.RecordProto2.MapEntry.Builder> 
           getLabelBuilderList() {
        return getLabelFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          aialgorithms.proto2.RecordProto2.MapEntry, aialgorithms.proto2.RecordProto2.MapEntry.Builder, aialgorithms.proto2.RecordProto2.MapEntryOrBuilder> 
          getLabelFieldBuilder() {
        if (labelBuilder_ == null) {
          labelBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              aialgorithms.proto2.RecordProto2.MapEntry, aialgorithms.proto2.RecordProto2.MapEntry.Builder, aialgorithms.proto2.RecordProto2.MapEntryOrBuilder>(
                  label_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          label_ = null;
        }
        return labelBuilder_;
      }

      // optional string uid = 3;
      private java.lang.Object uid_ = "";
      /**
       * <code>optional string uid = 3;</code>
       *
       * <pre>
       * Unique identifier for this record in the dataset.
       *
       * Whilst not necessary, this allows better
       * debugging where there are data issues.
       *
       * This is not used by the algorithm directly.
       * </pre>
       */
      public boolean hasUid() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional string uid = 3;</code>
       *
       * <pre>
       * Unique identifier for this record in the dataset.
       *
       * Whilst not necessary, this allows better
       * debugging where there are data issues.
       *
       * This is not used by the algorithm directly.
       * </pre>
       */
      public java.lang.String getUid() {
        java.lang.Object ref = uid_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          uid_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string uid = 3;</code>
       *
       * <pre>
       * Unique identifier for this record in the dataset.
       *
       * Whilst not necessary, this allows better
       * debugging where there are data issues.
       *
       * This is not used by the algorithm directly.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getUidBytes() {
        java.lang.Object ref = uid_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          uid_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string uid = 3;</code>
       *
       * <pre>
       * Unique identifier for this record in the dataset.
       *
       * Whilst not necessary, this allows better
       * debugging where there are data issues.
       *
       * This is not used by the algorithm directly.
       * </pre>
       */
      public Builder setUid(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        uid_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string uid = 3;</code>
       *
       * <pre>
       * Unique identifier for this record in the dataset.
       *
       * Whilst not necessary, this allows better
       * debugging where there are data issues.
       *
       * This is not used by the algorithm directly.
       * </pre>
       */
      public Builder clearUid() {
        bitField0_ = (bitField0_ & ~0x00000004);
        uid_ = getDefaultInstance().getUid();
        onChanged();
        return this;
      }
      /**
       * <code>optional string uid = 3;</code>
       *
       * <pre>
       * Unique identifier for this record in the dataset.
       *
       * Whilst not necessary, this allows better
       * debugging where there are data issues.
       *
       * This is not used by the algorithm directly.
       * </pre>
       */
      public Builder setUidBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        uid_ = value;
        onChanged();
        return this;
      }

      // optional string metadata = 4;
      private java.lang.Object metadata_ = "";
      /**
       * <code>optional string metadata = 4;</code>
       *
       * <pre>
       * Textual metadata describing the record.
       *
       * This may include JSON-serialized information
       * about the source of the record.
       *
       * This is not used by the algorithm directly.
       * </pre>
       */
      public boolean hasMetadata() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional string metadata = 4;</code>
       *
       * <pre>
       * Textual metadata describing the record.
       *
       * This may include JSON-serialized information
       * about the source of the record.
       *
       * This is not used by the algorithm directly.
       * </pre>
       */
      public java.lang.String getMetadata() {
        java.lang.Object ref = metadata_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          metadata_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string metadata = 4;</code>
       *
       * <pre>
       * Textual metadata describing the record.
       *
       * This may include JSON-serialized information
       * about the source of the record.
       *
       * This is not used by the algorithm directly.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getMetadataBytes() {
        java.lang.Object ref = metadata_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          metadata_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string metadata = 4;</code>
       *
       * <pre>
       * Textual metadata describing the record.
       *
       * This may include JSON-serialized information
       * about the source of the record.
       *
       * This is not used by the algorithm directly.
       * </pre>
       */
      public Builder setMetadata(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        metadata_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string metadata = 4;</code>
       *
       * <pre>
       * Textual metadata describing the record.
       *
       * This may include JSON-serialized information
       * about the source of the record.
       *
       * This is not used by the algorithm directly.
       * </pre>
       */
      public Builder clearMetadata() {
        bitField0_ = (bitField0_ & ~0x00000008);
        metadata_ = getDefaultInstance().getMetadata();
        onChanged();
        return this;
      }
      /**
       * <code>optional string metadata = 4;</code>
       *
       * <pre>
       * Textual metadata describing the record.
       *
       * This may include JSON-serialized information
       * about the source of the record.
       *
       * This is not used by the algorithm directly.
       * </pre>
       */
      public Builder setMetadataBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        metadata_ = value;
        onChanged();
        return this;
      }

      // optional string configuration = 5;
      private java.lang.Object configuration_ = "";
      /**
       * <code>optional string configuration = 5;</code>
       *
       * <pre>
       * Optional serialized JSON object that allows per-record
       * hyper-parameters/configuration/other information to be set.
       *
       * The meaning/interpretation of this field is defined by
       * the algorithm author and may not be supported.
       *
       * This is used to pass additional inference configuration
       * when batch inference is used (e.g. types of scores to return).
       * </pre>
       */
      public boolean hasConfiguration() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional string configuration = 5;</code>
       *
       * <pre>
       * Optional serialized JSON object that allows per-record
       * hyper-parameters/configuration/other information to be set.
       *
       * The meaning/interpretation of this field is defined by
       * the algorithm author and may not be supported.
       *
       * This is used to pass additional inference configuration
       * when batch inference is used (e.g. types of scores to return).
       * </pre>
       */
      public java.lang.String getConfiguration() {
        java.lang.Object ref = configuration_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          configuration_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string configuration = 5;</code>
       *
       * <pre>
       * Optional serialized JSON object that allows per-record
       * hyper-parameters/configuration/other information to be set.
       *
       * The meaning/interpretation of this field is defined by
       * the algorithm author and may not be supported.
       *
       * This is used to pass additional inference configuration
       * when batch inference is used (e.g. types of scores to return).
       * </pre>
       */
      public com.google.protobuf.ByteString
          getConfigurationBytes() {
        java.lang.Object ref = configuration_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          configuration_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string configuration = 5;</code>
       *
       * <pre>
       * Optional serialized JSON object that allows per-record
       * hyper-parameters/configuration/other information to be set.
       *
       * The meaning/interpretation of this field is defined by
       * the algorithm author and may not be supported.
       *
       * This is used to pass additional inference configuration
       * when batch inference is used (e.g. types of scores to return).
       * </pre>
       */
      public Builder setConfiguration(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
        configuration_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string configuration = 5;</code>
       *
       * <pre>
       * Optional serialized JSON object that allows per-record
       * hyper-parameters/configuration/other information to be set.
       *
       * The meaning/interpretation of this field is defined by
       * the algorithm author and may not be supported.
       *
       * This is used to pass additional inference configuration
       * when batch inference is used (e.g. types of scores to return).
       * </pre>
       */
      public Builder clearConfiguration() {
        bitField0_ = (bitField0_ & ~0x00000010);
        configuration_ = getDefaultInstance().getConfiguration();
        onChanged();
        return this;
      }
      /**
       * <code>optional string configuration = 5;</code>
       *
       * <pre>
       * Optional serialized JSON object that allows per-record
       * hyper-parameters/configuration/other information to be set.
       *
       * The meaning/interpretation of this field is defined by
       * the algorithm author and may not be supported.
       *
       * This is used to pass additional inference configuration
       * when batch inference is used (e.g. types of scores to return).
       * </pre>
       */
      public Builder setConfigurationBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
        configuration_ = value;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:aialgorithms.proto2.Record)
    }

    static {
      defaultInstance = new Record(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:aialgorithms.proto2.Record)
  }

  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_aialgorithms_proto2_Float32Tensor_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_aialgorithms_proto2_Float32Tensor_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_aialgorithms_proto2_Float64Tensor_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_aialgorithms_proto2_Float64Tensor_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_aialgorithms_proto2_Int32Tensor_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_aialgorithms_proto2_Int32Tensor_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_aialgorithms_proto2_Bytes_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_aialgorithms_proto2_Bytes_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_aialgorithms_proto2_Value_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_aialgorithms_proto2_Value_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_aialgorithms_proto2_MapEntry_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_aialgorithms_proto2_MapEntry_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_aialgorithms_proto2_Record_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_aialgorithms_proto2_Record_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\"AIAlgorithmsProtobufSchema/p.proto\022\023ai" +
      "algorithms.proto2\"H\n\rFloat32Tensor\022\022\n\006va" +
      "lues\030\001 \003(\002B\002\020\001\022\020\n\004keys\030\002 \003(\004B\002\020\001\022\021\n\005shap" +
      "e\030\003 \003(\004B\002\020\001\"H\n\rFloat64Tensor\022\022\n\006values\030\001" +
      " \003(\001B\002\020\001\022\020\n\004keys\030\002 \003(\004B\002\020\001\022\021\n\005shape\030\003 \003(" +
      "\004B\002\020\001\"F\n\013Int32Tensor\022\022\n\006values\030\001 \003(\005B\002\020\001" +
      "\022\020\n\004keys\030\002 \003(\004B\002\020\001\022\021\n\005shape\030\003 \003(\004B\002\020\001\",\n" +
      "\005Bytes\022\r\n\005value\030\001 \003(\014\022\024\n\014content_type\030\002 " +
      "\001(\t\"\342\001\n\005Value\022:\n\016float32_tensor\030\002 \001(\0132\"." +
      "aialgorithms.proto2.Float32Tensor\022:\n\016flo",
      "at64_tensor\030\003 \001(\0132\".aialgorithms.proto2." +
      "Float64Tensor\0226\n\014int32_tensor\030\007 \001(\0132 .ai" +
      "algorithms.proto2.Int32Tensor\022)\n\005bytes\030\t" +
      " \001(\0132\032.aialgorithms.proto2.Bytes\"B\n\010MapE" +
      "ntry\022\013\n\003key\030\001 \001(\t\022)\n\005value\030\002 \001(\0132\032.aialg" +
      "orithms.proto2.Value\"\235\001\n\006Record\022/\n\010featu" +
      "res\030\001 \003(\0132\035.aialgorithms.proto2.MapEntry" +
      "\022,\n\005label\030\002 \003(\0132\035.aialgorithms.proto2.Ma" +
      "pEntry\022\013\n\003uid\030\003 \001(\t\022\020\n\010metadata\030\004 \001(\t\022\025\n" +
      "\rconfiguration\030\005 \001(\tB\016B\014RecordProto2"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_aialgorithms_proto2_Float32Tensor_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_aialgorithms_proto2_Float32Tensor_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_aialgorithms_proto2_Float32Tensor_descriptor,
              new java.lang.String[] { "Values", "Keys", "Shape", });
          internal_static_aialgorithms_proto2_Float64Tensor_descriptor =
            getDescriptor().getMessageTypes().get(1);
          internal_static_aialgorithms_proto2_Float64Tensor_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_aialgorithms_proto2_Float64Tensor_descriptor,
              new java.lang.String[] { "Values", "Keys", "Shape", });
          internal_static_aialgorithms_proto2_Int32Tensor_descriptor =
            getDescriptor().getMessageTypes().get(2);
          internal_static_aialgorithms_proto2_Int32Tensor_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_aialgorithms_proto2_Int32Tensor_descriptor,
              new java.lang.String[] { "Values", "Keys", "Shape", });
          internal_static_aialgorithms_proto2_Bytes_descriptor =
            getDescriptor().getMessageTypes().get(3);
          internal_static_aialgorithms_proto2_Bytes_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_aialgorithms_proto2_Bytes_descriptor,
              new java.lang.String[] { "Value", "ContentType", });
          internal_static_aialgorithms_proto2_Value_descriptor =
            getDescriptor().getMessageTypes().get(4);
          internal_static_aialgorithms_proto2_Value_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_aialgorithms_proto2_Value_descriptor,
              new java.lang.String[] { "Float32Tensor", "Float64Tensor", "Int32Tensor", "Bytes", });
          internal_static_aialgorithms_proto2_MapEntry_descriptor =
            getDescriptor().getMessageTypes().get(5);
          internal_static_aialgorithms_proto2_MapEntry_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_aialgorithms_proto2_MapEntry_descriptor,
              new java.lang.String[] { "Key", "Value", });
          internal_static_aialgorithms_proto2_Record_descriptor =
            getDescriptor().getMessageTypes().get(6);
          internal_static_aialgorithms_proto2_Record_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_aialgorithms_proto2_Record_descriptor,
              new java.lang.String[] { "Features", "Label", "Uid", "Metadata", "Configuration", });
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
